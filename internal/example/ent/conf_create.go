// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lesomnus/entpb/internal/example/ent/conf"
)

// ConfCreate is the builder for creating a Conf entity.
type ConfCreate struct {
	config
	mutation *ConfMutation
	hooks    []Hook
}

// SetDateCreated sets the "date_created" field.
func (cc *ConfCreate) SetDateCreated(t time.Time) *ConfCreate {
	cc.mutation.SetDateCreated(t)
	return cc
}

// SetNillableDateCreated sets the "date_created" field if the given value is not nil.
func (cc *ConfCreate) SetNillableDateCreated(t *time.Time) *ConfCreate {
	if t != nil {
		cc.SetDateCreated(*t)
	}
	return cc
}

// SetValue sets the "value" field.
func (cc *ConfCreate) SetValue(s string) *ConfCreate {
	cc.mutation.SetValue(s)
	return cc
}

// SetDateUpdated sets the "date_updated" field.
func (cc *ConfCreate) SetDateUpdated(t time.Time) *ConfCreate {
	cc.mutation.SetDateUpdated(t)
	return cc
}

// SetNillableDateUpdated sets the "date_updated" field if the given value is not nil.
func (cc *ConfCreate) SetNillableDateUpdated(t *time.Time) *ConfCreate {
	if t != nil {
		cc.SetDateUpdated(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ConfCreate) SetID(s string) *ConfCreate {
	cc.mutation.SetID(s)
	return cc
}

// Mutation returns the ConfMutation object of the builder.
func (cc *ConfCreate) Mutation() *ConfMutation {
	return cc.mutation
}

// Save creates the Conf in the database.
func (cc *ConfCreate) Save(ctx context.Context) (*Conf, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConfCreate) SaveX(ctx context.Context) *Conf {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConfCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConfCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ConfCreate) defaults() {
	if _, ok := cc.mutation.DateCreated(); !ok {
		v := conf.DefaultDateCreated()
		cc.mutation.SetDateCreated(v)
	}
	if _, ok := cc.mutation.DateUpdated(); !ok {
		v := conf.DefaultDateUpdated()
		cc.mutation.SetDateUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConfCreate) check() error {
	if _, ok := cc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "date_created", err: errors.New(`ent: missing required field "Conf.date_created"`)}
	}
	if _, ok := cc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Conf.value"`)}
	}
	if v, ok := cc.mutation.Value(); ok {
		if err := conf.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Conf.value": %w`, err)}
		}
	}
	if _, ok := cc.mutation.DateUpdated(); !ok {
		return &ValidationError{Name: "date_updated", err: errors.New(`ent: missing required field "Conf.date_updated"`)}
	}
	return nil
}

func (cc *ConfCreate) sqlSave(ctx context.Context) (*Conf, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Conf.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ConfCreate) createSpec() (*Conf, *sqlgraph.CreateSpec) {
	var (
		_node = &Conf{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(conf.Table, sqlgraph.NewFieldSpec(conf.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.DateCreated(); ok {
		_spec.SetField(conf.FieldDateCreated, field.TypeTime, value)
		_node.DateCreated = value
	}
	if value, ok := cc.mutation.Value(); ok {
		_spec.SetField(conf.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := cc.mutation.DateUpdated(); ok {
		_spec.SetField(conf.FieldDateUpdated, field.TypeTime, value)
		_node.DateUpdated = value
	}
	return _node, _spec
}

// ConfCreateBulk is the builder for creating many Conf entities in bulk.
type ConfCreateBulk struct {
	config
	err      error
	builders []*ConfCreate
}

// Save creates the Conf entities in the database.
func (ccb *ConfCreateBulk) Save(ctx context.Context) ([]*Conf, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Conf, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConfMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConfCreateBulk) SaveX(ctx context.Context) []*Conf {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConfCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConfCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
