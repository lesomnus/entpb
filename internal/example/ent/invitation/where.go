// Code generated by ent, DO NOT EDIT.

package invitation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lesomnus/entpb/internal/example/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldID, id))
}

// DateCreated applies equality check predicate on the "date_created" field. It's identical to DateCreatedEQ.
func DateCreated(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldDateCreated, v))
}

// Invitee applies equality check predicate on the "invitee" field. It's identical to InviteeEQ.
func Invitee(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldInvitee, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldType, v))
}

// DateExpired applies equality check predicate on the "date_expired" field. It's identical to DateExpiredEQ.
func DateExpired(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldDateExpired, v))
}

// DateAccepted applies equality check predicate on the "date_accepted" field. It's identical to DateAcceptedEQ.
func DateAccepted(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldDateAccepted, v))
}

// DateDeclined applies equality check predicate on the "date_declined" field. It's identical to DateDeclinedEQ.
func DateDeclined(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldDateDeclined, v))
}

// DateCanceled applies equality check predicate on the "date_canceled" field. It's identical to DateCanceledEQ.
func DateCanceled(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldDateCanceled, v))
}

// DateCreatedEQ applies the EQ predicate on the "date_created" field.
func DateCreatedEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldDateCreated, v))
}

// DateCreatedNEQ applies the NEQ predicate on the "date_created" field.
func DateCreatedNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldDateCreated, v))
}

// DateCreatedIn applies the In predicate on the "date_created" field.
func DateCreatedIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldDateCreated, vs...))
}

// DateCreatedNotIn applies the NotIn predicate on the "date_created" field.
func DateCreatedNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldDateCreated, vs...))
}

// DateCreatedGT applies the GT predicate on the "date_created" field.
func DateCreatedGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldDateCreated, v))
}

// DateCreatedGTE applies the GTE predicate on the "date_created" field.
func DateCreatedGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldDateCreated, v))
}

// DateCreatedLT applies the LT predicate on the "date_created" field.
func DateCreatedLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldDateCreated, v))
}

// DateCreatedLTE applies the LTE predicate on the "date_created" field.
func DateCreatedLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldDateCreated, v))
}

// InviteeEQ applies the EQ predicate on the "invitee" field.
func InviteeEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldInvitee, v))
}

// InviteeNEQ applies the NEQ predicate on the "invitee" field.
func InviteeNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldInvitee, v))
}

// InviteeIn applies the In predicate on the "invitee" field.
func InviteeIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldInvitee, vs...))
}

// InviteeNotIn applies the NotIn predicate on the "invitee" field.
func InviteeNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldInvitee, vs...))
}

// InviteeGT applies the GT predicate on the "invitee" field.
func InviteeGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldInvitee, v))
}

// InviteeGTE applies the GTE predicate on the "invitee" field.
func InviteeGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldInvitee, v))
}

// InviteeLT applies the LT predicate on the "invitee" field.
func InviteeLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldInvitee, v))
}

// InviteeLTE applies the LTE predicate on the "invitee" field.
func InviteeLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldInvitee, v))
}

// InviteeContains applies the Contains predicate on the "invitee" field.
func InviteeContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldInvitee, v))
}

// InviteeHasPrefix applies the HasPrefix predicate on the "invitee" field.
func InviteeHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldInvitee, v))
}

// InviteeHasSuffix applies the HasSuffix predicate on the "invitee" field.
func InviteeHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldInvitee, v))
}

// InviteeEqualFold applies the EqualFold predicate on the "invitee" field.
func InviteeEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldInvitee, v))
}

// InviteeContainsFold applies the ContainsFold predicate on the "invitee" field.
func InviteeContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldInvitee, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldType, v))
}

// DateExpiredEQ applies the EQ predicate on the "date_expired" field.
func DateExpiredEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldDateExpired, v))
}

// DateExpiredNEQ applies the NEQ predicate on the "date_expired" field.
func DateExpiredNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldDateExpired, v))
}

// DateExpiredIn applies the In predicate on the "date_expired" field.
func DateExpiredIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldDateExpired, vs...))
}

// DateExpiredNotIn applies the NotIn predicate on the "date_expired" field.
func DateExpiredNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldDateExpired, vs...))
}

// DateExpiredGT applies the GT predicate on the "date_expired" field.
func DateExpiredGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldDateExpired, v))
}

// DateExpiredGTE applies the GTE predicate on the "date_expired" field.
func DateExpiredGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldDateExpired, v))
}

// DateExpiredLT applies the LT predicate on the "date_expired" field.
func DateExpiredLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldDateExpired, v))
}

// DateExpiredLTE applies the LTE predicate on the "date_expired" field.
func DateExpiredLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldDateExpired, v))
}

// DateAcceptedEQ applies the EQ predicate on the "date_accepted" field.
func DateAcceptedEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldDateAccepted, v))
}

// DateAcceptedNEQ applies the NEQ predicate on the "date_accepted" field.
func DateAcceptedNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldDateAccepted, v))
}

// DateAcceptedIn applies the In predicate on the "date_accepted" field.
func DateAcceptedIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldDateAccepted, vs...))
}

// DateAcceptedNotIn applies the NotIn predicate on the "date_accepted" field.
func DateAcceptedNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldDateAccepted, vs...))
}

// DateAcceptedGT applies the GT predicate on the "date_accepted" field.
func DateAcceptedGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldDateAccepted, v))
}

// DateAcceptedGTE applies the GTE predicate on the "date_accepted" field.
func DateAcceptedGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldDateAccepted, v))
}

// DateAcceptedLT applies the LT predicate on the "date_accepted" field.
func DateAcceptedLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldDateAccepted, v))
}

// DateAcceptedLTE applies the LTE predicate on the "date_accepted" field.
func DateAcceptedLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldDateAccepted, v))
}

// DateAcceptedIsNil applies the IsNil predicate on the "date_accepted" field.
func DateAcceptedIsNil() predicate.Invitation {
	return predicate.Invitation(sql.FieldIsNull(FieldDateAccepted))
}

// DateAcceptedNotNil applies the NotNil predicate on the "date_accepted" field.
func DateAcceptedNotNil() predicate.Invitation {
	return predicate.Invitation(sql.FieldNotNull(FieldDateAccepted))
}

// DateDeclinedEQ applies the EQ predicate on the "date_declined" field.
func DateDeclinedEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldDateDeclined, v))
}

// DateDeclinedNEQ applies the NEQ predicate on the "date_declined" field.
func DateDeclinedNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldDateDeclined, v))
}

// DateDeclinedIn applies the In predicate on the "date_declined" field.
func DateDeclinedIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldDateDeclined, vs...))
}

// DateDeclinedNotIn applies the NotIn predicate on the "date_declined" field.
func DateDeclinedNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldDateDeclined, vs...))
}

// DateDeclinedGT applies the GT predicate on the "date_declined" field.
func DateDeclinedGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldDateDeclined, v))
}

// DateDeclinedGTE applies the GTE predicate on the "date_declined" field.
func DateDeclinedGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldDateDeclined, v))
}

// DateDeclinedLT applies the LT predicate on the "date_declined" field.
func DateDeclinedLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldDateDeclined, v))
}

// DateDeclinedLTE applies the LTE predicate on the "date_declined" field.
func DateDeclinedLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldDateDeclined, v))
}

// DateDeclinedIsNil applies the IsNil predicate on the "date_declined" field.
func DateDeclinedIsNil() predicate.Invitation {
	return predicate.Invitation(sql.FieldIsNull(FieldDateDeclined))
}

// DateDeclinedNotNil applies the NotNil predicate on the "date_declined" field.
func DateDeclinedNotNil() predicate.Invitation {
	return predicate.Invitation(sql.FieldNotNull(FieldDateDeclined))
}

// DateCanceledEQ applies the EQ predicate on the "date_canceled" field.
func DateCanceledEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldDateCanceled, v))
}

// DateCanceledNEQ applies the NEQ predicate on the "date_canceled" field.
func DateCanceledNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldDateCanceled, v))
}

// DateCanceledIn applies the In predicate on the "date_canceled" field.
func DateCanceledIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldDateCanceled, vs...))
}

// DateCanceledNotIn applies the NotIn predicate on the "date_canceled" field.
func DateCanceledNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldDateCanceled, vs...))
}

// DateCanceledGT applies the GT predicate on the "date_canceled" field.
func DateCanceledGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldDateCanceled, v))
}

// DateCanceledGTE applies the GTE predicate on the "date_canceled" field.
func DateCanceledGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldDateCanceled, v))
}

// DateCanceledLT applies the LT predicate on the "date_canceled" field.
func DateCanceledLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldDateCanceled, v))
}

// DateCanceledLTE applies the LTE predicate on the "date_canceled" field.
func DateCanceledLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldDateCanceled, v))
}

// DateCanceledIsNil applies the IsNil predicate on the "date_canceled" field.
func DateCanceledIsNil() predicate.Invitation {
	return predicate.Invitation(sql.FieldIsNull(FieldDateCanceled))
}

// DateCanceledNotNil applies the NotNil predicate on the "date_canceled" field.
func DateCanceledNotNil() predicate.Invitation {
	return predicate.Invitation(sql.FieldNotNull(FieldDateCanceled))
}

// HasSilo applies the HasEdge predicate on the "silo" edge.
func HasSilo() predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SiloTable, SiloColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSiloWith applies the HasEdge predicate on the "silo" edge with a given conditions (other predicates).
func HasSiloWith(preds ...predicate.Silo) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := newSiloStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInviter applies the HasEdge predicate on the "inviter" edge.
func HasInviter() predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InviterTable, InviterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInviterWith applies the HasEdge predicate on the "inviter" edge with a given conditions (other predicates).
func HasInviterWith(preds ...predicate.Account) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := newInviterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(sql.NotPredicates(p))
}
