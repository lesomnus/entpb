// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/lesomnus/entpb/internal/example/ent/account"
	"github.com/lesomnus/entpb/internal/example/ent/identity"
	"github.com/lesomnus/entpb/internal/example/ent/invitation"
	"github.com/lesomnus/entpb/internal/example/ent/membership"
	"github.com/lesomnus/entpb/internal/example/ent/silo"
	"github.com/lesomnus/entpb/internal/example/ent/team"
	"github.com/lesomnus/entpb/internal/example/ent/token"
	"github.com/lesomnus/entpb/internal/example/ent/user"
	"github.com/lesomnus/entpb/internal/example/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	accountMixin := schema.Account{}.Mixin()
	accountMixinFields0 := accountMixin[0].Fields()
	_ = accountMixinFields0
	accountMixinFields1 := accountMixin[1].Fields()
	_ = accountMixinFields1
	accountMixinFields2 := accountMixin[2].Fields()
	_ = accountMixinFields2
	accountFields := schema.Account{}.Fields()
	_ = accountFields
	// accountDescDateCreated is the schema descriptor for date_created field.
	accountDescDateCreated := accountMixinFields0[1].Descriptor()
	// account.DefaultDateCreated holds the default value on creation for the date_created field.
	account.DefaultDateCreated = accountDescDateCreated.Default.(func() time.Time)
	// accountDescAlias is the schema descriptor for alias field.
	accountDescAlias := accountMixinFields1[0].Descriptor()
	// account.DefaultAlias holds the default value on creation for the alias field.
	account.DefaultAlias = accountDescAlias.Default.(func() string)
	// account.AliasValidator is a validator for the "alias" field. It is called by the builders before save.
	account.AliasValidator = func() func(string) error {
		validators := accountDescAlias.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(alias string) error {
			for _, fn := range fns {
				if err := fn(alias); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// accountDescName is the schema descriptor for name field.
	accountDescName := accountMixinFields2[0].Descriptor()
	// account.DefaultName holds the default value on creation for the name field.
	account.DefaultName = accountDescName.Default.(string)
	// account.NameValidator is a validator for the "name" field. It is called by the builders before save.
	account.NameValidator = accountDescName.Validators[0].(func(string) error)
	// accountDescDescription is the schema descriptor for description field.
	accountDescDescription := accountMixinFields2[1].Descriptor()
	// account.DefaultDescription holds the default value on creation for the description field.
	account.DefaultDescription = accountDescDescription.Default.(string)
	// account.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	account.DescriptionValidator = accountDescDescription.Validators[0].(func(string) error)
	// accountDescID is the schema descriptor for id field.
	accountDescID := accountMixinFields0[0].Descriptor()
	// account.DefaultID holds the default value on creation for the id field.
	account.DefaultID = accountDescID.Default.(func() uuid.UUID)
	identityMixin := schema.Identity{}.Mixin()
	identityMixinFields0 := identityMixin[0].Fields()
	_ = identityMixinFields0
	identityMixinFields1 := identityMixin[1].Fields()
	_ = identityMixinFields1
	identityFields := schema.Identity{}.Fields()
	_ = identityFields
	// identityDescDateCreated is the schema descriptor for date_created field.
	identityDescDateCreated := identityMixinFields0[1].Descriptor()
	// identity.DefaultDateCreated holds the default value on creation for the date_created field.
	identity.DefaultDateCreated = identityDescDateCreated.Default.(func() time.Time)
	// identityDescName is the schema descriptor for name field.
	identityDescName := identityMixinFields1[0].Descriptor()
	// identity.DefaultName holds the default value on creation for the name field.
	identity.DefaultName = identityDescName.Default.(string)
	// identity.NameValidator is a validator for the "name" field. It is called by the builders before save.
	identity.NameValidator = identityDescName.Validators[0].(func(string) error)
	// identityDescDescription is the schema descriptor for description field.
	identityDescDescription := identityMixinFields1[1].Descriptor()
	// identity.DefaultDescription holds the default value on creation for the description field.
	identity.DefaultDescription = identityDescDescription.Default.(string)
	// identity.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	identity.DescriptionValidator = identityDescDescription.Validators[0].(func(string) error)
	// identityDescKind is the schema descriptor for kind field.
	identityDescKind := identityFields[0].Descriptor()
	// identity.KindValidator is a validator for the "kind" field. It is called by the builders before save.
	identity.KindValidator = identityDescKind.Validators[0].(func(string) error)
	// identityDescVerifier is the schema descriptor for verifier field.
	identityDescVerifier := identityFields[1].Descriptor()
	// identity.VerifierValidator is a validator for the "verifier" field. It is called by the builders before save.
	identity.VerifierValidator = identityDescVerifier.Validators[0].(func(string) error)
	// identityDescID is the schema descriptor for id field.
	identityDescID := identityMixinFields0[0].Descriptor()
	// identity.DefaultID holds the default value on creation for the id field.
	identity.DefaultID = identityDescID.Default.(func() uuid.UUID)
	invitationMixin := schema.Invitation{}.Mixin()
	invitationMixinFields0 := invitationMixin[0].Fields()
	_ = invitationMixinFields0
	invitationFields := schema.Invitation{}.Fields()
	_ = invitationFields
	// invitationDescDateCreated is the schema descriptor for date_created field.
	invitationDescDateCreated := invitationMixinFields0[1].Descriptor()
	// invitation.DefaultDateCreated holds the default value on creation for the date_created field.
	invitation.DefaultDateCreated = invitationDescDateCreated.Default.(func() time.Time)
	// invitationDescInvitee is the schema descriptor for invitee field.
	invitationDescInvitee := invitationFields[0].Descriptor()
	// invitation.InviteeValidator is a validator for the "invitee" field. It is called by the builders before save.
	invitation.InviteeValidator = invitationDescInvitee.Validators[0].(func(string) error)
	// invitationDescType is the schema descriptor for type field.
	invitationDescType := invitationFields[1].Descriptor()
	// invitation.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	invitation.TypeValidator = invitationDescType.Validators[0].(func(string) error)
	// invitationDescID is the schema descriptor for id field.
	invitationDescID := invitationMixinFields0[0].Descriptor()
	// invitation.DefaultID holds the default value on creation for the id field.
	invitation.DefaultID = invitationDescID.Default.(func() uuid.UUID)
	membershipMixin := schema.Membership{}.Mixin()
	membershipMixinFields0 := membershipMixin[0].Fields()
	_ = membershipMixinFields0
	membershipFields := schema.Membership{}.Fields()
	_ = membershipFields
	// membershipDescDateCreated is the schema descriptor for date_created field.
	membershipDescDateCreated := membershipMixinFields0[1].Descriptor()
	// membership.DefaultDateCreated holds the default value on creation for the date_created field.
	membership.DefaultDateCreated = membershipDescDateCreated.Default.(func() time.Time)
	// membershipDescID is the schema descriptor for id field.
	membershipDescID := membershipMixinFields0[0].Descriptor()
	// membership.DefaultID holds the default value on creation for the id field.
	membership.DefaultID = membershipDescID.Default.(func() uuid.UUID)
	siloMixin := schema.Silo{}.Mixin()
	siloMixinFields0 := siloMixin[0].Fields()
	_ = siloMixinFields0
	siloMixinFields1 := siloMixin[1].Fields()
	_ = siloMixinFields1
	siloMixinFields2 := siloMixin[2].Fields()
	_ = siloMixinFields2
	siloFields := schema.Silo{}.Fields()
	_ = siloFields
	// siloDescDateCreated is the schema descriptor for date_created field.
	siloDescDateCreated := siloMixinFields0[1].Descriptor()
	// silo.DefaultDateCreated holds the default value on creation for the date_created field.
	silo.DefaultDateCreated = siloDescDateCreated.Default.(func() time.Time)
	// siloDescAlias is the schema descriptor for alias field.
	siloDescAlias := siloMixinFields1[0].Descriptor()
	// silo.DefaultAlias holds the default value on creation for the alias field.
	silo.DefaultAlias = siloDescAlias.Default.(func() string)
	// silo.AliasValidator is a validator for the "alias" field. It is called by the builders before save.
	silo.AliasValidator = func() func(string) error {
		validators := siloDescAlias.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(alias string) error {
			for _, fn := range fns {
				if err := fn(alias); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// siloDescName is the schema descriptor for name field.
	siloDescName := siloMixinFields2[0].Descriptor()
	// silo.DefaultName holds the default value on creation for the name field.
	silo.DefaultName = siloDescName.Default.(string)
	// silo.NameValidator is a validator for the "name" field. It is called by the builders before save.
	silo.NameValidator = siloDescName.Validators[0].(func(string) error)
	// siloDescDescription is the schema descriptor for description field.
	siloDescDescription := siloMixinFields2[1].Descriptor()
	// silo.DefaultDescription holds the default value on creation for the description field.
	silo.DefaultDescription = siloDescDescription.Default.(string)
	// silo.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	silo.DescriptionValidator = siloDescDescription.Validators[0].(func(string) error)
	// siloDescID is the schema descriptor for id field.
	siloDescID := siloMixinFields0[0].Descriptor()
	// silo.DefaultID holds the default value on creation for the id field.
	silo.DefaultID = siloDescID.Default.(func() uuid.UUID)
	teamMixin := schema.Team{}.Mixin()
	teamMixinFields0 := teamMixin[0].Fields()
	_ = teamMixinFields0
	teamMixinFields1 := teamMixin[1].Fields()
	_ = teamMixinFields1
	teamMixinFields2 := teamMixin[2].Fields()
	_ = teamMixinFields2
	teamFields := schema.Team{}.Fields()
	_ = teamFields
	// teamDescDateCreated is the schema descriptor for date_created field.
	teamDescDateCreated := teamMixinFields0[1].Descriptor()
	// team.DefaultDateCreated holds the default value on creation for the date_created field.
	team.DefaultDateCreated = teamDescDateCreated.Default.(func() time.Time)
	// teamDescAlias is the schema descriptor for alias field.
	teamDescAlias := teamMixinFields1[0].Descriptor()
	// team.DefaultAlias holds the default value on creation for the alias field.
	team.DefaultAlias = teamDescAlias.Default.(func() string)
	// team.AliasValidator is a validator for the "alias" field. It is called by the builders before save.
	team.AliasValidator = func() func(string) error {
		validators := teamDescAlias.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(alias string) error {
			for _, fn := range fns {
				if err := fn(alias); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// teamDescName is the schema descriptor for name field.
	teamDescName := teamMixinFields2[0].Descriptor()
	// team.DefaultName holds the default value on creation for the name field.
	team.DefaultName = teamDescName.Default.(string)
	// team.NameValidator is a validator for the "name" field. It is called by the builders before save.
	team.NameValidator = teamDescName.Validators[0].(func(string) error)
	// teamDescDescription is the schema descriptor for description field.
	teamDescDescription := teamMixinFields2[1].Descriptor()
	// team.DefaultDescription holds the default value on creation for the description field.
	team.DefaultDescription = teamDescDescription.Default.(string)
	// team.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	team.DescriptionValidator = teamDescDescription.Validators[0].(func(string) error)
	// teamDescID is the schema descriptor for id field.
	teamDescID := teamMixinFields0[0].Descriptor()
	// team.DefaultID holds the default value on creation for the id field.
	team.DefaultID = teamDescID.Default.(func() uuid.UUID)
	tokenMixin := schema.Token{}.Mixin()
	tokenMixinFields0 := tokenMixin[0].Fields()
	_ = tokenMixinFields0
	tokenFields := schema.Token{}.Fields()
	_ = tokenFields
	// tokenDescDateCreated is the schema descriptor for date_created field.
	tokenDescDateCreated := tokenMixinFields0[1].Descriptor()
	// token.DefaultDateCreated holds the default value on creation for the date_created field.
	token.DefaultDateCreated = tokenDescDateCreated.Default.(func() time.Time)
	// tokenDescValue is the schema descriptor for value field.
	tokenDescValue := tokenFields[0].Descriptor()
	// token.ValueValidator is a validator for the "value" field. It is called by the builders before save.
	token.ValueValidator = tokenDescValue.Validators[0].(func(string) error)
	// tokenDescType is the schema descriptor for type field.
	tokenDescType := tokenFields[1].Descriptor()
	// token.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	token.TypeValidator = tokenDescType.Validators[0].(func(string) error)
	// tokenDescName is the schema descriptor for name field.
	tokenDescName := tokenFields[2].Descriptor()
	// token.DefaultName holds the default value on creation for the name field.
	token.DefaultName = tokenDescName.Default.(string)
	// tokenDescID is the schema descriptor for id field.
	tokenDescID := tokenMixinFields0[0].Descriptor()
	// token.DefaultID holds the default value on creation for the id field.
	token.DefaultID = tokenDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userMixinFields1 := userMixin[1].Fields()
	_ = userMixinFields1
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescDateCreated is the schema descriptor for date_created field.
	userDescDateCreated := userMixinFields0[1].Descriptor()
	// user.DefaultDateCreated holds the default value on creation for the date_created field.
	user.DefaultDateCreated = userDescDateCreated.Default.(func() time.Time)
	// userDescAlias is the schema descriptor for alias field.
	userDescAlias := userMixinFields1[0].Descriptor()
	// user.DefaultAlias holds the default value on creation for the alias field.
	user.DefaultAlias = userDescAlias.Default.(func() string)
	// user.AliasValidator is a validator for the "alias" field. It is called by the builders before save.
	user.AliasValidator = func() func(string) error {
		validators := userDescAlias.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(alias string) error {
			for _, fn := range fns {
				if err := fn(alias); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
