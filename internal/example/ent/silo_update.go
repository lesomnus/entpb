// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lesomnus/entpb/internal/example/ent/account"
	"github.com/lesomnus/entpb/internal/example/ent/invitation"
	"github.com/lesomnus/entpb/internal/example/ent/predicate"
	"github.com/lesomnus/entpb/internal/example/ent/silo"
	"github.com/lesomnus/entpb/internal/example/ent/team"
)

// SiloUpdate is the builder for updating Silo entities.
type SiloUpdate struct {
	config
	hooks    []Hook
	mutation *SiloMutation
}

// Where appends a list predicates to the SiloUpdate builder.
func (su *SiloUpdate) Where(ps ...predicate.Silo) *SiloUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetAlias sets the "alias" field.
func (su *SiloUpdate) SetAlias(s string) *SiloUpdate {
	su.mutation.SetAlias(s)
	return su
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (su *SiloUpdate) SetNillableAlias(s *string) *SiloUpdate {
	if s != nil {
		su.SetAlias(*s)
	}
	return su
}

// SetName sets the "name" field.
func (su *SiloUpdate) SetName(s string) *SiloUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SiloUpdate) SetNillableName(s *string) *SiloUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *SiloUpdate) SetDescription(s string) *SiloUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SiloUpdate) SetNillableDescription(s *string) *SiloUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (su *SiloUpdate) AddAccountIDs(ids ...uuid.UUID) *SiloUpdate {
	su.mutation.AddAccountIDs(ids...)
	return su
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (su *SiloUpdate) AddAccounts(a ...*Account) *SiloUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddAccountIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (su *SiloUpdate) AddTeamIDs(ids ...uuid.UUID) *SiloUpdate {
	su.mutation.AddTeamIDs(ids...)
	return su
}

// AddTeams adds the "teams" edges to the Team entity.
func (su *SiloUpdate) AddTeams(t ...*Team) *SiloUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTeamIDs(ids...)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (su *SiloUpdate) AddInvitationIDs(ids ...uuid.UUID) *SiloUpdate {
	su.mutation.AddInvitationIDs(ids...)
	return su
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (su *SiloUpdate) AddInvitations(i ...*Invitation) *SiloUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.AddInvitationIDs(ids...)
}

// Mutation returns the SiloMutation object of the builder.
func (su *SiloUpdate) Mutation() *SiloMutation {
	return su.mutation
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (su *SiloUpdate) ClearAccounts() *SiloUpdate {
	su.mutation.ClearAccounts()
	return su
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (su *SiloUpdate) RemoveAccountIDs(ids ...uuid.UUID) *SiloUpdate {
	su.mutation.RemoveAccountIDs(ids...)
	return su
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (su *SiloUpdate) RemoveAccounts(a ...*Account) *SiloUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveAccountIDs(ids...)
}

// ClearTeams clears all "teams" edges to the Team entity.
func (su *SiloUpdate) ClearTeams() *SiloUpdate {
	su.mutation.ClearTeams()
	return su
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (su *SiloUpdate) RemoveTeamIDs(ids ...uuid.UUID) *SiloUpdate {
	su.mutation.RemoveTeamIDs(ids...)
	return su
}

// RemoveTeams removes "teams" edges to Team entities.
func (su *SiloUpdate) RemoveTeams(t ...*Team) *SiloUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTeamIDs(ids...)
}

// ClearInvitations clears all "invitations" edges to the Invitation entity.
func (su *SiloUpdate) ClearInvitations() *SiloUpdate {
	su.mutation.ClearInvitations()
	return su
}

// RemoveInvitationIDs removes the "invitations" edge to Invitation entities by IDs.
func (su *SiloUpdate) RemoveInvitationIDs(ids ...uuid.UUID) *SiloUpdate {
	su.mutation.RemoveInvitationIDs(ids...)
	return su
}

// RemoveInvitations removes "invitations" edges to Invitation entities.
func (su *SiloUpdate) RemoveInvitations(i ...*Invitation) *SiloUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.RemoveInvitationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SiloUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SiloUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SiloUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SiloUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SiloUpdate) check() error {
	if v, ok := su.mutation.Alias(); ok {
		if err := silo.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`ent: validator failed for field "Silo.alias": %w`, err)}
		}
	}
	if v, ok := su.mutation.Name(); ok {
		if err := silo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Silo.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Description(); ok {
		if err := silo.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Silo.description": %w`, err)}
		}
	}
	return nil
}

func (su *SiloUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(silo.Table, silo.Columns, sqlgraph.NewFieldSpec(silo.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Alias(); ok {
		_spec.SetField(silo.FieldAlias, field.TypeString, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(silo.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(silo.FieldDescription, field.TypeString, value)
	}
	if su.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.AccountsTable,
			Columns: []string{silo.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !su.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.AccountsTable,
			Columns: []string{silo.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.AccountsTable,
			Columns: []string{silo.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.TeamsTable,
			Columns: []string{silo.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !su.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.TeamsTable,
			Columns: []string{silo.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.TeamsTable,
			Columns: []string{silo.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.InvitationsTable,
			Columns: []string{silo.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedInvitationsIDs(); len(nodes) > 0 && !su.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.InvitationsTable,
			Columns: []string{silo.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.InvitationsTable,
			Columns: []string{silo.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{silo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SiloUpdateOne is the builder for updating a single Silo entity.
type SiloUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SiloMutation
}

// SetAlias sets the "alias" field.
func (suo *SiloUpdateOne) SetAlias(s string) *SiloUpdateOne {
	suo.mutation.SetAlias(s)
	return suo
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (suo *SiloUpdateOne) SetNillableAlias(s *string) *SiloUpdateOne {
	if s != nil {
		suo.SetAlias(*s)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *SiloUpdateOne) SetName(s string) *SiloUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SiloUpdateOne) SetNillableName(s *string) *SiloUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *SiloUpdateOne) SetDescription(s string) *SiloUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SiloUpdateOne) SetNillableDescription(s *string) *SiloUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (suo *SiloUpdateOne) AddAccountIDs(ids ...uuid.UUID) *SiloUpdateOne {
	suo.mutation.AddAccountIDs(ids...)
	return suo
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (suo *SiloUpdateOne) AddAccounts(a ...*Account) *SiloUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddAccountIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (suo *SiloUpdateOne) AddTeamIDs(ids ...uuid.UUID) *SiloUpdateOne {
	suo.mutation.AddTeamIDs(ids...)
	return suo
}

// AddTeams adds the "teams" edges to the Team entity.
func (suo *SiloUpdateOne) AddTeams(t ...*Team) *SiloUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTeamIDs(ids...)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (suo *SiloUpdateOne) AddInvitationIDs(ids ...uuid.UUID) *SiloUpdateOne {
	suo.mutation.AddInvitationIDs(ids...)
	return suo
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (suo *SiloUpdateOne) AddInvitations(i ...*Invitation) *SiloUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.AddInvitationIDs(ids...)
}

// Mutation returns the SiloMutation object of the builder.
func (suo *SiloUpdateOne) Mutation() *SiloMutation {
	return suo.mutation
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (suo *SiloUpdateOne) ClearAccounts() *SiloUpdateOne {
	suo.mutation.ClearAccounts()
	return suo
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (suo *SiloUpdateOne) RemoveAccountIDs(ids ...uuid.UUID) *SiloUpdateOne {
	suo.mutation.RemoveAccountIDs(ids...)
	return suo
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (suo *SiloUpdateOne) RemoveAccounts(a ...*Account) *SiloUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveAccountIDs(ids...)
}

// ClearTeams clears all "teams" edges to the Team entity.
func (suo *SiloUpdateOne) ClearTeams() *SiloUpdateOne {
	suo.mutation.ClearTeams()
	return suo
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (suo *SiloUpdateOne) RemoveTeamIDs(ids ...uuid.UUID) *SiloUpdateOne {
	suo.mutation.RemoveTeamIDs(ids...)
	return suo
}

// RemoveTeams removes "teams" edges to Team entities.
func (suo *SiloUpdateOne) RemoveTeams(t ...*Team) *SiloUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTeamIDs(ids...)
}

// ClearInvitations clears all "invitations" edges to the Invitation entity.
func (suo *SiloUpdateOne) ClearInvitations() *SiloUpdateOne {
	suo.mutation.ClearInvitations()
	return suo
}

// RemoveInvitationIDs removes the "invitations" edge to Invitation entities by IDs.
func (suo *SiloUpdateOne) RemoveInvitationIDs(ids ...uuid.UUID) *SiloUpdateOne {
	suo.mutation.RemoveInvitationIDs(ids...)
	return suo
}

// RemoveInvitations removes "invitations" edges to Invitation entities.
func (suo *SiloUpdateOne) RemoveInvitations(i ...*Invitation) *SiloUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.RemoveInvitationIDs(ids...)
}

// Where appends a list predicates to the SiloUpdate builder.
func (suo *SiloUpdateOne) Where(ps ...predicate.Silo) *SiloUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SiloUpdateOne) Select(field string, fields ...string) *SiloUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Silo entity.
func (suo *SiloUpdateOne) Save(ctx context.Context) (*Silo, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SiloUpdateOne) SaveX(ctx context.Context) *Silo {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SiloUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SiloUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SiloUpdateOne) check() error {
	if v, ok := suo.mutation.Alias(); ok {
		if err := silo.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`ent: validator failed for field "Silo.alias": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Name(); ok {
		if err := silo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Silo.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Description(); ok {
		if err := silo.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Silo.description": %w`, err)}
		}
	}
	return nil
}

func (suo *SiloUpdateOne) sqlSave(ctx context.Context) (_node *Silo, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(silo.Table, silo.Columns, sqlgraph.NewFieldSpec(silo.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Silo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, silo.FieldID)
		for _, f := range fields {
			if !silo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != silo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Alias(); ok {
		_spec.SetField(silo.FieldAlias, field.TypeString, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(silo.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(silo.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.AccountsTable,
			Columns: []string{silo.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !suo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.AccountsTable,
			Columns: []string{silo.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.AccountsTable,
			Columns: []string{silo.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.TeamsTable,
			Columns: []string{silo.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !suo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.TeamsTable,
			Columns: []string{silo.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.TeamsTable,
			Columns: []string{silo.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.InvitationsTable,
			Columns: []string{silo.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedInvitationsIDs(); len(nodes) > 0 && !suo.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.InvitationsTable,
			Columns: []string{silo.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   silo.InvitationsTable,
			Columns: []string{silo.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Silo{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{silo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
