// Code generated by ent, DO NOT EDIT.

package token

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lesomnus/entpb/internal/example/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldID, id))
}

// DateCreated applies equality check predicate on the "date_created" field. It's identical to DateCreatedEQ.
func DateCreated(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldDateCreated, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldValue, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldType, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldName, v))
}

// UseCountLimit applies equality check predicate on the "use_count_limit" field. It's identical to UseCountLimitEQ.
func UseCountLimit(v uint64) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldUseCountLimit, v))
}

// DateExpired applies equality check predicate on the "date_expired" field. It's identical to DateExpiredEQ.
func DateExpired(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldDateExpired, v))
}

// DateCreatedEQ applies the EQ predicate on the "date_created" field.
func DateCreatedEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldDateCreated, v))
}

// DateCreatedNEQ applies the NEQ predicate on the "date_created" field.
func DateCreatedNEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldDateCreated, v))
}

// DateCreatedIn applies the In predicate on the "date_created" field.
func DateCreatedIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldDateCreated, vs...))
}

// DateCreatedNotIn applies the NotIn predicate on the "date_created" field.
func DateCreatedNotIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldDateCreated, vs...))
}

// DateCreatedGT applies the GT predicate on the "date_created" field.
func DateCreatedGT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldDateCreated, v))
}

// DateCreatedGTE applies the GTE predicate on the "date_created" field.
func DateCreatedGTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldDateCreated, v))
}

// DateCreatedLT applies the LT predicate on the "date_created" field.
func DateCreatedLT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldDateCreated, v))
}

// DateCreatedLTE applies the LTE predicate on the "date_created" field.
func DateCreatedLTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldDateCreated, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldValue, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldName, v))
}

// UseCountLimitEQ applies the EQ predicate on the "use_count_limit" field.
func UseCountLimitEQ(v uint64) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldUseCountLimit, v))
}

// UseCountLimitNEQ applies the NEQ predicate on the "use_count_limit" field.
func UseCountLimitNEQ(v uint64) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldUseCountLimit, v))
}

// UseCountLimitIn applies the In predicate on the "use_count_limit" field.
func UseCountLimitIn(vs ...uint64) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldUseCountLimit, vs...))
}

// UseCountLimitNotIn applies the NotIn predicate on the "use_count_limit" field.
func UseCountLimitNotIn(vs ...uint64) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldUseCountLimit, vs...))
}

// UseCountLimitGT applies the GT predicate on the "use_count_limit" field.
func UseCountLimitGT(v uint64) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldUseCountLimit, v))
}

// UseCountLimitGTE applies the GTE predicate on the "use_count_limit" field.
func UseCountLimitGTE(v uint64) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldUseCountLimit, v))
}

// UseCountLimitLT applies the LT predicate on the "use_count_limit" field.
func UseCountLimitLT(v uint64) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldUseCountLimit, v))
}

// UseCountLimitLTE applies the LTE predicate on the "use_count_limit" field.
func UseCountLimitLTE(v uint64) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldUseCountLimit, v))
}

// DateExpiredEQ applies the EQ predicate on the "date_expired" field.
func DateExpiredEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldDateExpired, v))
}

// DateExpiredNEQ applies the NEQ predicate on the "date_expired" field.
func DateExpiredNEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldDateExpired, v))
}

// DateExpiredIn applies the In predicate on the "date_expired" field.
func DateExpiredIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldDateExpired, vs...))
}

// DateExpiredNotIn applies the NotIn predicate on the "date_expired" field.
func DateExpiredNotIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldDateExpired, vs...))
}

// DateExpiredGT applies the GT predicate on the "date_expired" field.
func DateExpiredGT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldDateExpired, v))
}

// DateExpiredGTE applies the GTE predicate on the "date_expired" field.
func DateExpiredGTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldDateExpired, v))
}

// DateExpiredLT applies the LT predicate on the "date_expired" field.
func DateExpiredLT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldDateExpired, v))
}

// DateExpiredLTE applies the LTE predicate on the "date_expired" field.
func DateExpiredLTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldDateExpired, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Token) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Token) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Token) predicate.Token {
	return predicate.Token(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Token) predicate.Token {
	return predicate.Token(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Token) predicate.Token {
	return predicate.Token(sql.NotPredicates(p))
}
