// Code generated by "protoc-gen-entpb". DO NOT EDIT

package bare

import (
	context "context"
	uuid "github.com/google/uuid"
	ent "github.com/lesomnus/entpb/internal/example/ent"
	account "github.com/lesomnus/entpb/internal/example/ent/account"
	invitation "github.com/lesomnus/entpb/internal/example/ent/invitation"
	predicate "github.com/lesomnus/entpb/internal/example/ent/predicate"
	silo "github.com/lesomnus/entpb/internal/example/ent/silo"
	pb "github.com/lesomnus/entpb/internal/example/pb"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type InvitationServiceServer struct {
	db *ent.Client
	pb.UnimplementedInvitationServiceServer
}

func NewInvitationServiceServer(db *ent.Client) *InvitationServiceServer {
	return &InvitationServiceServer{db: db}
}
func (s *InvitationServiceServer) Create(ctx context.Context, req *pb.CreateInvitationRequest) (*pb.Invitation, error) {
	q := s.db.Invitation.Create()
	q.SetInvitee(req.GetInvitee())
	q.SetType(req.GetType())
	if v := req.GetDateExpired(); v != nil {
		w := v.AsTime()
		q.SetDateExpired(w)
	}
	if v := req.GetDateAccepted(); v != nil {
		w := v.AsTime()
		q.SetDateAccepted(w)
	}
	if v := req.GetDateDeclined(); v != nil {
		w := v.AsTime()
		q.SetDateDeclined(w)
	}
	if v := req.GetDateCanceled(); v != nil {
		w := v.AsTime()
		q.SetDateCanceled(w)
	}
	if id, err := GetSiloId(ctx, s.db, req.GetSilo()); err != nil {
		return nil, err
	} else {
		q.SetSiloID(id)
	}
	if id, err := GetAccountId(ctx, s.db, req.GetInviter()); err != nil {
		return nil, err
	} else {
		q.SetInviterID(id)
	}

	res, err := q.Save(ctx)
	if err != nil {
		return nil, ToStatus(err)
	}

	return ToProtoInvitation(res), nil
}
func (s *InvitationServiceServer) Delete(ctx context.Context, req *pb.GetInvitationRequest) (*emptypb.Empty, error) {
	p, err := GetInvitationSpecifier(req)
	if err != nil {
		return nil, err
	}
	if _, err := s.db.Invitation.Delete().Where(p).Exec(ctx); err != nil {
		return nil, ToStatus(err)
	}

	return &emptypb.Empty{}, nil
}
func (s *InvitationServiceServer) Get(ctx context.Context, req *pb.GetInvitationRequest) (*pb.Invitation, error) {
	q := s.db.Invitation.Query()
	if p, err := GetInvitationSpecifier(req); err != nil {
		return nil, err
	} else {
		q.Where(p)
	}

	res, err := QueryInvitationWithEdgeIds(q).Only(ctx)
	if err != nil {
		return nil, ToStatus(err)
	}

	return ToProtoInvitation(res), nil
}
func QueryInvitationWithEdgeIds(q *ent.InvitationQuery) *ent.InvitationQuery {
	q.WithSilo(func(q *ent.SiloQuery) { q.Select(silo.FieldID) })
	q.WithInviter(func(q *ent.AccountQuery) { q.Select(account.FieldID) })

	return q
}
func (s *InvitationServiceServer) Update(ctx context.Context, req *pb.UpdateInvitationRequest) (*pb.Invitation, error) {
	id, err := GetInvitationId(ctx, s.db, req.GetKey())
	if err != nil {
		return nil, err
	}

	q := s.db.Invitation.UpdateOneID(id)
	if v := req.DateExpired; v != nil {
		w := v.AsTime()
		q.SetDateExpired(w)
	}
	if v := req.DateAccepted; v != nil {
		w := v.AsTime()
		q.SetDateAccepted(w)
	}
	if v := req.DateDeclined; v != nil {
		w := v.AsTime()
		q.SetDateDeclined(w)
	}
	if v := req.DateCanceled; v != nil {
		w := v.AsTime()
		q.SetDateCanceled(w)
	}

	res, err := q.Save(ctx)
	if err != nil {
		return nil, ToStatus(err)
	}

	return ToProtoInvitation(res), nil
}
func ToProtoInvitation(v *ent.Invitation) *pb.Invitation {
	m := &pb.Invitation{}
	m.Id = v.ID[:]
	m.DateCreated = timestamppb.New(v.DateCreated)
	m.Invitee = v.Invitee
	m.Type = v.Type
	m.DateExpired = timestamppb.New(v.DateExpired)
	if v.DateAccepted != nil {
		m.DateAccepted = timestamppb.New(*v.DateAccepted)
	}
	if v.DateDeclined != nil {
		m.DateDeclined = timestamppb.New(*v.DateDeclined)
	}
	if v.DateCanceled != nil {
		m.DateCanceled = timestamppb.New(*v.DateCanceled)
	}
	if v := v.Edges.Silo; v != nil {
		m.Silo = ToProtoSilo(v)
	}
	if v := v.Edges.Inviter; v != nil {
		m.Inviter = ToProtoAccount(v)
	}
	return m
}
func GetInvitationId(ctx context.Context, db *ent.Client, req *pb.GetInvitationRequest) (uuid.UUID, error) {
	var r uuid.UUID
	if v, err := uuid.FromBytes(req.GetId()); err != nil {
		return r, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		return v, nil
	}
}
func GetInvitationSpecifier(req *pb.GetInvitationRequest) (predicate.Invitation, error) {
	if v, err := uuid.FromBytes(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		return invitation.IDEQ(v), nil
	}
}
