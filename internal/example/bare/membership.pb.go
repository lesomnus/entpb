// Code generated by "protoc-gen-entpb". DO NOT EDIT

package bare

import (
	context "context"
	uuid "github.com/google/uuid"
	ent "github.com/lesomnus/entpb/internal/example/ent"
	account "github.com/lesomnus/entpb/internal/example/ent/account"
	membership "github.com/lesomnus/entpb/internal/example/ent/membership"
	predicate "github.com/lesomnus/entpb/internal/example/ent/predicate"
	pb "github.com/lesomnus/entpb/internal/example/pb"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type MembershipServiceServer struct {
	db *ent.Client
	pb.UnimplementedMembershipServiceServer
}

func NewMembershipServiceServer(db *ent.Client) *MembershipServiceServer {
	return &MembershipServiceServer{db: db}
}
func (s *MembershipServiceServer) Create(ctx context.Context, req *pb.CreateMembershipRequest) (*pb.Membership, error) {
	q := s.db.Membership.Create()
	if v := req.Name; v != nil {
		q.SetName(*v)
	}
	if id, err := GetAccountId(ctx, s.db, req.GetAccount()); err != nil {
		return nil, err
	} else {
		q.SetAccountID(id)
	}

	res, err := q.Save(ctx)
	if err != nil {
		return nil, ToStatus(err)
	}

	return ToProtoMembership(res), nil
}
func (s *MembershipServiceServer) Delete(ctx context.Context, req *pb.GetMembershipRequest) (*emptypb.Empty, error) {
	p, err := GetMembershipSpecifier(req)
	if err != nil {
		return nil, err
	}
	if _, err := s.db.Membership.Delete().Where(p).Exec(ctx); err != nil {
		return nil, ToStatus(err)
	}

	return &emptypb.Empty{}, nil
}
func (s *MembershipServiceServer) Get(ctx context.Context, req *pb.GetMembershipRequest) (*pb.Membership, error) {
	q := s.db.Membership.Query()
	if p, err := GetMembershipSpecifier(req); err != nil {
		return nil, err
	} else {
		q.Where(p)
	}

	q.WithAccount(func(q *ent.AccountQuery) { q.Select(account.FieldID) })

	res, err := q.Only(ctx)
	if err != nil {
		return nil, ToStatus(err)
	}

	return ToProtoMembership(res), nil
}
func (s *MembershipServiceServer) Update(ctx context.Context, req *pb.UpdateMembershipRequest) (*pb.Membership, error) {
	id, err := GetMembershipId(ctx, s.db, req.GetKey())
	if err != nil {
		return nil, err
	}

	q := s.db.Membership.UpdateOneID(id)
	if v := req.Name; v != nil {
		q.SetName(*v)
	}

	res, err := q.Save(ctx)
	if err != nil {
		return nil, ToStatus(err)
	}

	return ToProtoMembership(res), nil
}
func ToProtoMembership(v *ent.Membership) *pb.Membership {
	m := &pb.Membership{}
	m.Id = v.ID[:]
	m.DateCreated = timestamppb.New(v.DateCreated)
	m.Name = v.Name
	if v := v.Edges.Account; v != nil {
		m.Account = ToProtoAccount(v)
	}
	return m
}
func GetMembershipId(ctx context.Context, db *ent.Client, req *pb.GetMembershipRequest) (uuid.UUID, error) {
	var r uuid.UUID
	k := req.GetKey()
	if t, ok := k.(*pb.GetMembershipRequest_Id); ok {
		if v, err := uuid.FromBytes(t.Id); err != nil {
			return r, status.Errorf(codes.InvalidArgument, "id: %s", err)
		} else {
			return v, nil
		}
	}

	p, err := GetMembershipSpecifier(req)
	if err != nil {
		return r, err
	}

	v, err := db.Membership.Query().Where(p).OnlyID(ctx)
	if err != nil {
		return r, ToStatus(err)
	}

	return v, nil
}
func GetMembershipSpecifier(req *pb.GetMembershipRequest) (predicate.Membership, error) {
	switch t := req.GetKey().(type) {
	case *pb.GetMembershipRequest_Id:
		if v, err := uuid.FromBytes(t.Id); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
		} else {
			return membership.IDEQ(v), nil
		}
	case *pb.GetMembershipRequest_InAccount:
		ps := make([]predicate.Membership, 0, 2)
		if p, err := GetAccountSpecifier(t.InAccount.GetAccount()); err != nil {
			s, _ := status.FromError(err)
			return nil, status.Errorf(codes.InvalidArgument, "in_account.%s", s.Message())
		} else {
			ps = append(ps, membership.HasAccountWith(p))
		}
		ps = append(ps, membership.NameEQ(t.InAccount.GetName()))
		return membership.And(ps...), nil
	case nil:
		return nil, status.Errorf(codes.InvalidArgument, "key not provided")
	default:
		return nil, status.Errorf(codes.Unimplemented, "unknown type of key")
	}
}
