// Code generated by "protoc-gen-entpb". DO NOT EDIT

package bare

import (
	context "context"
	uuid "github.com/google/uuid"
	ent "github.com/lesomnus/entpb/internal/example/ent"
	membership "github.com/lesomnus/entpb/internal/example/ent/membership"
	predicate "github.com/lesomnus/entpb/internal/example/ent/predicate"
	pb "github.com/lesomnus/entpb/internal/example/pb"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type MembershipServiceServer struct {
	db *ent.Client
	pb.UnimplementedMembershipServiceServer
}

func NewMembershipServiceServer(db *ent.Client) *MembershipServiceServer {
	return &MembershipServiceServer{db: db}
}
func (s *MembershipServiceServer) Create(ctx context.Context, req *pb.CreateMembershipRequest) (*pb.Membership, error) {
	q := s.db.Membership.Create()
	if v, err := GetAccountId(ctx, s.db, req.GetAccount()); err != nil {
		return nil, err
	} else {
		q.SetAccountID(v)
	}

	res, err := q.Save(ctx)
	if err != nil {
		return nil, ToStatus(err)
	}

	return ToProtoMembership(res), nil
}
func (s *MembershipServiceServer) Delete(ctx context.Context, req *pb.DeleteMembershipRequest) (*emptypb.Empty, error) {
	q := s.db.Membership.Delete()
	if v, err := uuid.FromBytes(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		q.Where(membership.IDEQ(v))
	}

	_, err := q.Exec(ctx)
	if err != nil {
		return nil, ToStatus(err)
	}

	return &emptypb.Empty{}, nil
}
func (s *MembershipServiceServer) Get(ctx context.Context, req *pb.GetMembershipRequest) (*pb.Membership, error) {
	q := s.db.Membership.Query()
	if p, err := GetMembershipSpecifier(req); err != nil {
		return nil, err
	} else {
		q.Where(p)
	}

	q.WithAccount(func(q *ent.AccountQuery) { q.Select(membership.FieldID) })

	res, err := q.Only(ctx)
	if err != nil {
		return nil, ToStatus(err)
	}

	return ToProtoMembership(res), nil
}
func (s *MembershipServiceServer) Update(ctx context.Context, req *pb.UpdateMembershipRequest) (*pb.Membership, error) {
	id, err := uuid.FromBytes(req.GetId())
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	}

	q := s.db.Membership.UpdateOneID(id)

	res, err := q.Save(ctx)
	if err != nil {
		return nil, ToStatus(err)
	}

	return ToProtoMembership(res), nil
}
func ToProtoMembership(v *ent.Membership) *pb.Membership {
	m := &pb.Membership{}
	m.Id = v.ID[:]
	m.DateCreated = timestamppb.New(v.DateCreated)
	if v := v.Edges.Account; v != nil {
		m.Account = ToProtoAccount(v)
	}
	return m
}
func GetMembershipId(ctx context.Context, db *ent.Client, req *pb.GetMembershipRequest) (uuid.UUID, error) {
	var r uuid.UUID
	if v, err := uuid.FromBytes(req.GetId()); err != nil {
		return r, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		return v, nil
	}
}
func GetMembershipSpecifier(req *pb.GetMembershipRequest) (predicate.Membership, error) {
	if v, err := uuid.FromBytes(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "id: %s", err)
	} else {
		return membership.IDEQ(v), nil
	}
}
