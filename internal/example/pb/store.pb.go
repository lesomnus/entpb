// Code generated by "github.com/lesomuns/entpb/pbgen". DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.0
// source: khepri/horus/store.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias       *string         `protobuf:"bytes,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	Owner       *GetUserRequest `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Silo        *GetSiloRequest `protobuf:"bytes,4,opt,name=silo,proto3" json:"silo,omitempty"`
	Role        *Role           `protobuf:"varint,6,opt,name=role,proto3,enum=entpb.directory.Role,oneof" json:"role,omitempty"`
	Name        *string         `protobuf:"bytes,7,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string         `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *CreateAccountRequest) Reset() {
	*x = CreateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountRequest) ProtoMessage() {}

func (x *CreateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAccountRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *CreateAccountRequest) GetOwner() *GetUserRequest {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *CreateAccountRequest) GetSilo() *GetSiloRequest {
	if x != nil {
		return x.Silo
	}
	return nil
}

func (x *CreateAccountRequest) GetRole() Role {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

func (x *CreateAccountRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateAccountRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type CreateConfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CreateConfRequest) Reset() {
	*x = CreateConfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConfRequest) ProtoMessage() {}

func (x *CreateConfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConfRequest.ProtoReflect.Descriptor instead.
func (*CreateConfRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{1}
}

func (x *CreateConfRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateConfRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CreateIdentityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner       *GetUserRequest `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Kind        string          `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Value       string          `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Name        *string         `protobuf:"bytes,7,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string         `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *CreateIdentityRequest) Reset() {
	*x = CreateIdentityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIdentityRequest) ProtoMessage() {}

func (x *CreateIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIdentityRequest.ProtoReflect.Descriptor instead.
func (*CreateIdentityRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{2}
}

func (x *CreateIdentityRequest) GetOwner() *GetUserRequest {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *CreateIdentityRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CreateIdentityRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CreateIdentityRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateIdentityRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type CreateInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inviter      *GetAccountRequest     `protobuf:"bytes,3,opt,name=inviter,proto3" json:"inviter,omitempty"`
	Silo         *GetSiloRequest        `protobuf:"bytes,4,opt,name=silo,proto3" json:"silo,omitempty"`
	Invitee      string                 `protobuf:"bytes,5,opt,name=invitee,proto3" json:"invitee,omitempty"`
	Type         string                 `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	DateCanceled *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=date_canceled,json=dateCanceled,proto3,oneof" json:"date_canceled,omitempty"`
	DateDeclined *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=date_declined,json=dateDeclined,proto3,oneof" json:"date_declined,omitempty"`
	DateAccepted *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=date_accepted,json=dateAccepted,proto3,oneof" json:"date_accepted,omitempty"`
	DateExpired  *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=date_expired,json=dateExpired,proto3" json:"date_expired,omitempty"`
}

func (x *CreateInvitationRequest) Reset() {
	*x = CreateInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvitationRequest) ProtoMessage() {}

func (x *CreateInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvitationRequest.ProtoReflect.Descriptor instead.
func (*CreateInvitationRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{3}
}

func (x *CreateInvitationRequest) GetInviter() *GetAccountRequest {
	if x != nil {
		return x.Inviter
	}
	return nil
}

func (x *CreateInvitationRequest) GetSilo() *GetSiloRequest {
	if x != nil {
		return x.Silo
	}
	return nil
}

func (x *CreateInvitationRequest) GetInvitee() string {
	if x != nil {
		return x.Invitee
	}
	return ""
}

func (x *CreateInvitationRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateInvitationRequest) GetDateCanceled() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCanceled
	}
	return nil
}

func (x *CreateInvitationRequest) GetDateDeclined() *timestamppb.Timestamp {
	if x != nil {
		return x.DateDeclined
	}
	return nil
}

func (x *CreateInvitationRequest) GetDateAccepted() *timestamppb.Timestamp {
	if x != nil {
		return x.DateAccepted
	}
	return nil
}

func (x *CreateInvitationRequest) GetDateExpired() *timestamppb.Timestamp {
	if x != nil {
		return x.DateExpired
	}
	return nil
}

type CreateMembershipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *GetAccountRequest `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	Team    *GetTeamRequest    `protobuf:"bytes,4,opt,name=team,proto3" json:"team,omitempty"`
	Role    *Role              `protobuf:"varint,6,opt,name=role,proto3,enum=entpb.directory.Role,oneof" json:"role,omitempty"`
}

func (x *CreateMembershipRequest) Reset() {
	*x = CreateMembershipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMembershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMembershipRequest) ProtoMessage() {}

func (x *CreateMembershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMembershipRequest.ProtoReflect.Descriptor instead.
func (*CreateMembershipRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{4}
}

func (x *CreateMembershipRequest) GetAccount() *GetAccountRequest {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *CreateMembershipRequest) GetTeam() *GetTeamRequest {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *CreateMembershipRequest) GetRole() Role {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

type CreateSiloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias       *string `protobuf:"bytes,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	Name        *string `protobuf:"bytes,7,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *CreateSiloRequest) Reset() {
	*x = CreateSiloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSiloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSiloRequest) ProtoMessage() {}

func (x *CreateSiloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSiloRequest.ProtoReflect.Descriptor instead.
func (*CreateSiloRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{5}
}

func (x *CreateSiloRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *CreateSiloRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateSiloRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type CreateTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias       *string         `protobuf:"bytes,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	Silo        *GetSiloRequest `protobuf:"bytes,3,opt,name=silo,proto3" json:"silo,omitempty"`
	Name        *string         `protobuf:"bytes,7,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string         `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *CreateTeamRequest) Reset() {
	*x = CreateTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamRequest) ProtoMessage() {}

func (x *CreateTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamRequest.ProtoReflect.Descriptor instead.
func (*CreateTeamRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTeamRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *CreateTeamRequest) GetSilo() *GetSiloRequest {
	if x != nil {
		return x.Silo
	}
	return nil
}

func (x *CreateTeamRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateTeamRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type CreateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name          *string                `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Owner         *GetUserRequest        `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Parent        *GetTokenRequest       `protobuf:"bytes,6,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	UseCountLimit *uint64                `protobuf:"varint,8,opt,name=use_count_limit,json=useCountLimit,proto3,oneof" json:"use_count_limit,omitempty"`
	DateExpired   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=date_expired,json=dateExpired,proto3" json:"date_expired,omitempty"`
}

func (x *CreateTokenRequest) Reset() {
	*x = CreateTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenRequest) ProtoMessage() {}

func (x *CreateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateTokenRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTokenRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CreateTokenRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateTokenRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateTokenRequest) GetOwner() *GetUserRequest {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *CreateTokenRequest) GetParent() *GetTokenRequest {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *CreateTokenRequest) GetUseCountLimit() uint64 {
	if x != nil && x.UseCountLimit != nil {
		return *x.UseCountLimit
	}
	return 0
}

func (x *CreateTokenRequest) GetDateExpired() *timestamppb.Timestamp {
	if x != nil {
		return x.DateExpired
	}
	return nil
}

type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias  *string         `protobuf:"bytes,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	Parent *GetUserRequest `protobuf:"bytes,3,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{8}
}

func (x *CreateUserRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *CreateUserRequest) GetParent() *GetUserRequest {
	if x != nil {
		return x.Parent
	}
	return nil
}

type GetAccountByAliasInSilo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string          `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Silo  *GetSiloRequest `protobuf:"bytes,4,opt,name=silo,proto3" json:"silo,omitempty"`
}

func (x *GetAccountByAliasInSilo) Reset() {
	*x = GetAccountByAliasInSilo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountByAliasInSilo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountByAliasInSilo) ProtoMessage() {}

func (x *GetAccountByAliasInSilo) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountByAliasInSilo.ProtoReflect.Descriptor instead.
func (*GetAccountByAliasInSilo) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{9}
}

func (x *GetAccountByAliasInSilo) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *GetAccountByAliasInSilo) GetSilo() *GetSiloRequest {
	if x != nil {
		return x.Silo
	}
	return nil
}

type GetAccountByOwnerInSilo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner *GetUserRequest `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Silo  *GetSiloRequest `protobuf:"bytes,4,opt,name=silo,proto3" json:"silo,omitempty"`
}

func (x *GetAccountByOwnerInSilo) Reset() {
	*x = GetAccountByOwnerInSilo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountByOwnerInSilo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountByOwnerInSilo) ProtoMessage() {}

func (x *GetAccountByOwnerInSilo) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountByOwnerInSilo.ProtoReflect.Descriptor instead.
func (*GetAccountByOwnerInSilo) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{10}
}

func (x *GetAccountByOwnerInSilo) GetOwner() *GetUserRequest {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GetAccountByOwnerInSilo) GetSilo() *GetSiloRequest {
	if x != nil {
		return x.Silo
	}
	return nil
}

type GetAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//
	//	*GetAccountRequest_Id
	//	*GetAccountRequest_ByAliasInSilo
	//	*GetAccountRequest_ByOwnerInSilo
	//	*GetAccountRequest_Query
	Key isGetAccountRequest_Key `protobuf_oneof:"key"`
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{11}
}

func (m *GetAccountRequest) GetKey() isGetAccountRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *GetAccountRequest) GetId() []byte {
	if x, ok := x.GetKey().(*GetAccountRequest_Id); ok {
		return x.Id
	}
	return nil
}

func (x *GetAccountRequest) GetByAliasInSilo() *GetAccountByAliasInSilo {
	if x, ok := x.GetKey().(*GetAccountRequest_ByAliasInSilo); ok {
		return x.ByAliasInSilo
	}
	return nil
}

func (x *GetAccountRequest) GetByOwnerInSilo() *GetAccountByOwnerInSilo {
	if x, ok := x.GetKey().(*GetAccountRequest_ByOwnerInSilo); ok {
		return x.ByOwnerInSilo
	}
	return nil
}

func (x *GetAccountRequest) GetQuery() string {
	if x, ok := x.GetKey().(*GetAccountRequest_Query); ok {
		return x.Query
	}
	return ""
}

type isGetAccountRequest_Key interface {
	isGetAccountRequest_Key()
}

type GetAccountRequest_Id struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type GetAccountRequest_ByAliasInSilo struct {
	ByAliasInSilo *GetAccountByAliasInSilo `protobuf:"bytes,2,opt,name=by_alias_in_silo,json=byAliasInSilo,proto3,oneof"`
}

type GetAccountRequest_ByOwnerInSilo struct {
	ByOwnerInSilo *GetAccountByOwnerInSilo `protobuf:"bytes,3,opt,name=by_owner_in_silo,json=byOwnerInSilo,proto3,oneof"`
}

type GetAccountRequest_Query struct {
	Query string `protobuf:"bytes,14,opt,name=query,proto3,oneof"`
}

func (*GetAccountRequest_Id) isGetAccountRequest_Key() {}

func (*GetAccountRequest_ByAliasInSilo) isGetAccountRequest_Key() {}

func (*GetAccountRequest_ByOwnerInSilo) isGetAccountRequest_Key() {}

func (*GetAccountRequest_Query) isGetAccountRequest_Key() {}

type GetConfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//
	//	*GetConfRequest_Id
	//	*GetConfRequest_Query
	Key isGetConfRequest_Key `protobuf_oneof:"key"`
}

func (x *GetConfRequest) Reset() {
	*x = GetConfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfRequest) ProtoMessage() {}

func (x *GetConfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfRequest.ProtoReflect.Descriptor instead.
func (*GetConfRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{12}
}

func (m *GetConfRequest) GetKey() isGetConfRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *GetConfRequest) GetId() string {
	if x, ok := x.GetKey().(*GetConfRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *GetConfRequest) GetQuery() string {
	if x, ok := x.GetKey().(*GetConfRequest_Query); ok {
		return x.Query
	}
	return ""
}

type isGetConfRequest_Key interface {
	isGetConfRequest_Key()
}

type GetConfRequest_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type GetConfRequest_Query struct {
	Query string `protobuf:"bytes,14,opt,name=query,proto3,oneof"`
}

func (*GetConfRequest_Id) isGetConfRequest_Key() {}

func (*GetConfRequest_Query) isGetConfRequest_Key() {}

type GetIdentityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//
	//	*GetIdentityRequest_Id
	//	*GetIdentityRequest_Query
	Key isGetIdentityRequest_Key `protobuf_oneof:"key"`
}

func (x *GetIdentityRequest) Reset() {
	*x = GetIdentityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentityRequest) ProtoMessage() {}

func (x *GetIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentityRequest.ProtoReflect.Descriptor instead.
func (*GetIdentityRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{13}
}

func (m *GetIdentityRequest) GetKey() isGetIdentityRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *GetIdentityRequest) GetId() []byte {
	if x, ok := x.GetKey().(*GetIdentityRequest_Id); ok {
		return x.Id
	}
	return nil
}

func (x *GetIdentityRequest) GetQuery() string {
	if x, ok := x.GetKey().(*GetIdentityRequest_Query); ok {
		return x.Query
	}
	return ""
}

type isGetIdentityRequest_Key interface {
	isGetIdentityRequest_Key()
}

type GetIdentityRequest_Id struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type GetIdentityRequest_Query struct {
	Query string `protobuf:"bytes,14,opt,name=query,proto3,oneof"`
}

func (*GetIdentityRequest_Id) isGetIdentityRequest_Key() {}

func (*GetIdentityRequest_Query) isGetIdentityRequest_Key() {}

type GetInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//
	//	*GetInvitationRequest_Id
	//	*GetInvitationRequest_Query
	Key isGetInvitationRequest_Key `protobuf_oneof:"key"`
}

func (x *GetInvitationRequest) Reset() {
	*x = GetInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvitationRequest) ProtoMessage() {}

func (x *GetInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvitationRequest.ProtoReflect.Descriptor instead.
func (*GetInvitationRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{14}
}

func (m *GetInvitationRequest) GetKey() isGetInvitationRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *GetInvitationRequest) GetId() []byte {
	if x, ok := x.GetKey().(*GetInvitationRequest_Id); ok {
		return x.Id
	}
	return nil
}

func (x *GetInvitationRequest) GetQuery() string {
	if x, ok := x.GetKey().(*GetInvitationRequest_Query); ok {
		return x.Query
	}
	return ""
}

type isGetInvitationRequest_Key interface {
	isGetInvitationRequest_Key()
}

type GetInvitationRequest_Id struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type GetInvitationRequest_Query struct {
	Query string `protobuf:"bytes,14,opt,name=query,proto3,oneof"`
}

func (*GetInvitationRequest_Id) isGetInvitationRequest_Key() {}

func (*GetInvitationRequest_Query) isGetInvitationRequest_Key() {}

type GetMembershipByAccountInTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *GetAccountRequest `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	Team    *GetTeamRequest    `protobuf:"bytes,4,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *GetMembershipByAccountInTeam) Reset() {
	*x = GetMembershipByAccountInTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMembershipByAccountInTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembershipByAccountInTeam) ProtoMessage() {}

func (x *GetMembershipByAccountInTeam) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembershipByAccountInTeam.ProtoReflect.Descriptor instead.
func (*GetMembershipByAccountInTeam) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{15}
}

func (x *GetMembershipByAccountInTeam) GetAccount() *GetAccountRequest {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *GetMembershipByAccountInTeam) GetTeam() *GetTeamRequest {
	if x != nil {
		return x.Team
	}
	return nil
}

type GetMembershipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//
	//	*GetMembershipRequest_Id
	//	*GetMembershipRequest_ByAccountInTeam
	//	*GetMembershipRequest_Query
	Key isGetMembershipRequest_Key `protobuf_oneof:"key"`
}

func (x *GetMembershipRequest) Reset() {
	*x = GetMembershipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMembershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembershipRequest) ProtoMessage() {}

func (x *GetMembershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembershipRequest.ProtoReflect.Descriptor instead.
func (*GetMembershipRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{16}
}

func (m *GetMembershipRequest) GetKey() isGetMembershipRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *GetMembershipRequest) GetId() []byte {
	if x, ok := x.GetKey().(*GetMembershipRequest_Id); ok {
		return x.Id
	}
	return nil
}

func (x *GetMembershipRequest) GetByAccountInTeam() *GetMembershipByAccountInTeam {
	if x, ok := x.GetKey().(*GetMembershipRequest_ByAccountInTeam); ok {
		return x.ByAccountInTeam
	}
	return nil
}

func (x *GetMembershipRequest) GetQuery() string {
	if x, ok := x.GetKey().(*GetMembershipRequest_Query); ok {
		return x.Query
	}
	return ""
}

type isGetMembershipRequest_Key interface {
	isGetMembershipRequest_Key()
}

type GetMembershipRequest_Id struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type GetMembershipRequest_ByAccountInTeam struct {
	ByAccountInTeam *GetMembershipByAccountInTeam `protobuf:"bytes,3,opt,name=by_account_in_team,json=byAccountInTeam,proto3,oneof"`
}

type GetMembershipRequest_Query struct {
	Query string `protobuf:"bytes,14,opt,name=query,proto3,oneof"`
}

func (*GetMembershipRequest_Id) isGetMembershipRequest_Key() {}

func (*GetMembershipRequest_ByAccountInTeam) isGetMembershipRequest_Key() {}

func (*GetMembershipRequest_Query) isGetMembershipRequest_Key() {}

type GetSiloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//
	//	*GetSiloRequest_Id
	//	*GetSiloRequest_Alias
	//	*GetSiloRequest_Query
	Key isGetSiloRequest_Key `protobuf_oneof:"key"`
}

func (x *GetSiloRequest) Reset() {
	*x = GetSiloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSiloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiloRequest) ProtoMessage() {}

func (x *GetSiloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiloRequest.ProtoReflect.Descriptor instead.
func (*GetSiloRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{17}
}

func (m *GetSiloRequest) GetKey() isGetSiloRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *GetSiloRequest) GetId() []byte {
	if x, ok := x.GetKey().(*GetSiloRequest_Id); ok {
		return x.Id
	}
	return nil
}

func (x *GetSiloRequest) GetAlias() string {
	if x, ok := x.GetKey().(*GetSiloRequest_Alias); ok {
		return x.Alias
	}
	return ""
}

func (x *GetSiloRequest) GetQuery() string {
	if x, ok := x.GetKey().(*GetSiloRequest_Query); ok {
		return x.Query
	}
	return ""
}

type isGetSiloRequest_Key interface {
	isGetSiloRequest_Key()
}

type GetSiloRequest_Id struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type GetSiloRequest_Alias struct {
	Alias string `protobuf:"bytes,2,opt,name=alias,proto3,oneof"`
}

type GetSiloRequest_Query struct {
	Query string `protobuf:"bytes,14,opt,name=query,proto3,oneof"`
}

func (*GetSiloRequest_Id) isGetSiloRequest_Key() {}

func (*GetSiloRequest_Alias) isGetSiloRequest_Key() {}

func (*GetSiloRequest_Query) isGetSiloRequest_Key() {}

type GetTeamByAliasInSilo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string          `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Silo  *GetSiloRequest `protobuf:"bytes,3,opt,name=silo,proto3" json:"silo,omitempty"`
}

func (x *GetTeamByAliasInSilo) Reset() {
	*x = GetTeamByAliasInSilo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamByAliasInSilo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamByAliasInSilo) ProtoMessage() {}

func (x *GetTeamByAliasInSilo) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamByAliasInSilo.ProtoReflect.Descriptor instead.
func (*GetTeamByAliasInSilo) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{18}
}

func (x *GetTeamByAliasInSilo) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *GetTeamByAliasInSilo) GetSilo() *GetSiloRequest {
	if x != nil {
		return x.Silo
	}
	return nil
}

type GetTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//
	//	*GetTeamRequest_Id
	//	*GetTeamRequest_ByAliasInSilo
	//	*GetTeamRequest_Query
	Key isGetTeamRequest_Key `protobuf_oneof:"key"`
}

func (x *GetTeamRequest) Reset() {
	*x = GetTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamRequest) ProtoMessage() {}

func (x *GetTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamRequest.ProtoReflect.Descriptor instead.
func (*GetTeamRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{19}
}

func (m *GetTeamRequest) GetKey() isGetTeamRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *GetTeamRequest) GetId() []byte {
	if x, ok := x.GetKey().(*GetTeamRequest_Id); ok {
		return x.Id
	}
	return nil
}

func (x *GetTeamRequest) GetByAliasInSilo() *GetTeamByAliasInSilo {
	if x, ok := x.GetKey().(*GetTeamRequest_ByAliasInSilo); ok {
		return x.ByAliasInSilo
	}
	return nil
}

func (x *GetTeamRequest) GetQuery() string {
	if x, ok := x.GetKey().(*GetTeamRequest_Query); ok {
		return x.Query
	}
	return ""
}

type isGetTeamRequest_Key interface {
	isGetTeamRequest_Key()
}

type GetTeamRequest_Id struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type GetTeamRequest_ByAliasInSilo struct {
	ByAliasInSilo *GetTeamByAliasInSilo `protobuf:"bytes,2,opt,name=by_alias_in_silo,json=byAliasInSilo,proto3,oneof"`
}

type GetTeamRequest_Query struct {
	Query string `protobuf:"bytes,14,opt,name=query,proto3,oneof"`
}

func (*GetTeamRequest_Id) isGetTeamRequest_Key() {}

func (*GetTeamRequest_ByAliasInSilo) isGetTeamRequest_Key() {}

func (*GetTeamRequest_Query) isGetTeamRequest_Key() {}

type GetTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//
	//	*GetTokenRequest_Id
	//	*GetTokenRequest_Value
	//	*GetTokenRequest_Query
	Key isGetTokenRequest_Key `protobuf_oneof:"key"`
}

func (x *GetTokenRequest) Reset() {
	*x = GetTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenRequest) ProtoMessage() {}

func (x *GetTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenRequest.ProtoReflect.Descriptor instead.
func (*GetTokenRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{20}
}

func (m *GetTokenRequest) GetKey() isGetTokenRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *GetTokenRequest) GetId() []byte {
	if x, ok := x.GetKey().(*GetTokenRequest_Id); ok {
		return x.Id
	}
	return nil
}

func (x *GetTokenRequest) GetValue() string {
	if x, ok := x.GetKey().(*GetTokenRequest_Value); ok {
		return x.Value
	}
	return ""
}

func (x *GetTokenRequest) GetQuery() string {
	if x, ok := x.GetKey().(*GetTokenRequest_Query); ok {
		return x.Query
	}
	return ""
}

type isGetTokenRequest_Key interface {
	isGetTokenRequest_Key()
}

type GetTokenRequest_Id struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type GetTokenRequest_Value struct {
	Value string `protobuf:"bytes,2,opt,name=value,proto3,oneof"`
}

type GetTokenRequest_Query struct {
	Query string `protobuf:"bytes,14,opt,name=query,proto3,oneof"`
}

func (*GetTokenRequest_Id) isGetTokenRequest_Key() {}

func (*GetTokenRequest_Value) isGetTokenRequest_Key() {}

func (*GetTokenRequest_Query) isGetTokenRequest_Key() {}

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//
	//	*GetUserRequest_Id
	//	*GetUserRequest_Alias
	//	*GetUserRequest_Query
	Key isGetUserRequest_Key `protobuf_oneof:"key"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{21}
}

func (m *GetUserRequest) GetKey() isGetUserRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *GetUserRequest) GetId() []byte {
	if x, ok := x.GetKey().(*GetUserRequest_Id); ok {
		return x.Id
	}
	return nil
}

func (x *GetUserRequest) GetAlias() string {
	if x, ok := x.GetKey().(*GetUserRequest_Alias); ok {
		return x.Alias
	}
	return ""
}

func (x *GetUserRequest) GetQuery() string {
	if x, ok := x.GetKey().(*GetUserRequest_Query); ok {
		return x.Query
	}
	return ""
}

type isGetUserRequest_Key interface {
	isGetUserRequest_Key()
}

type GetUserRequest_Id struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type GetUserRequest_Alias struct {
	Alias string `protobuf:"bytes,2,opt,name=alias,proto3,oneof"`
}

type GetUserRequest_Query struct {
	Query string `protobuf:"bytes,14,opt,name=query,proto3,oneof"`
}

func (*GetUserRequest_Id) isGetUserRequest_Key() {}

func (*GetUserRequest_Alias) isGetUserRequest_Key() {}

func (*GetUserRequest_Query) isGetUserRequest_Key() {}

type UpdateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         *GetAccountRequest `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Alias       *string            `protobuf:"bytes,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	Role        *Role              `protobuf:"varint,6,opt,name=role,proto3,enum=entpb.directory.Role,oneof" json:"role,omitempty"`
	Name        *string            `protobuf:"bytes,7,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string            `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *UpdateAccountRequest) Reset() {
	*x = UpdateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountRequest) ProtoMessage() {}

func (x *UpdateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateAccountRequest) GetKey() *GetAccountRequest {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateAccountRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *UpdateAccountRequest) GetRole() Role {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

func (x *UpdateAccountRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateAccountRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type UpdateConfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *GetConfRequest `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *string         `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *UpdateConfRequest) Reset() {
	*x = UpdateConfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfRequest) ProtoMessage() {}

func (x *UpdateConfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateConfRequest) GetKey() *GetConfRequest {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateConfRequest) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type UpdateIdentityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         *GetIdentityRequest `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name        *string             `protobuf:"bytes,7,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string             `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *UpdateIdentityRequest) Reset() {
	*x = UpdateIdentityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIdentityRequest) ProtoMessage() {}

func (x *UpdateIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIdentityRequest.ProtoReflect.Descriptor instead.
func (*UpdateIdentityRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateIdentityRequest) GetKey() *GetIdentityRequest {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateIdentityRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateIdentityRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type UpdateInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          *GetInvitationRequest  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DateCanceled *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=date_canceled,json=dateCanceled,proto3,oneof" json:"date_canceled,omitempty"`
	DateDeclined *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=date_declined,json=dateDeclined,proto3,oneof" json:"date_declined,omitempty"`
	DateAccepted *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=date_accepted,json=dateAccepted,proto3,oneof" json:"date_accepted,omitempty"`
	DateExpired  *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=date_expired,json=dateExpired,proto3,oneof" json:"date_expired,omitempty"`
}

func (x *UpdateInvitationRequest) Reset() {
	*x = UpdateInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvitationRequest) ProtoMessage() {}

func (x *UpdateInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvitationRequest.ProtoReflect.Descriptor instead.
func (*UpdateInvitationRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateInvitationRequest) GetKey() *GetInvitationRequest {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateInvitationRequest) GetDateCanceled() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCanceled
	}
	return nil
}

func (x *UpdateInvitationRequest) GetDateDeclined() *timestamppb.Timestamp {
	if x != nil {
		return x.DateDeclined
	}
	return nil
}

func (x *UpdateInvitationRequest) GetDateAccepted() *timestamppb.Timestamp {
	if x != nil {
		return x.DateAccepted
	}
	return nil
}

func (x *UpdateInvitationRequest) GetDateExpired() *timestamppb.Timestamp {
	if x != nil {
		return x.DateExpired
	}
	return nil
}

type UpdateMembershipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  *GetMembershipRequest `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Role *Role                 `protobuf:"varint,6,opt,name=role,proto3,enum=entpb.directory.Role,oneof" json:"role,omitempty"`
}

func (x *UpdateMembershipRequest) Reset() {
	*x = UpdateMembershipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMembershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMembershipRequest) ProtoMessage() {}

func (x *UpdateMembershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMembershipRequest.ProtoReflect.Descriptor instead.
func (*UpdateMembershipRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateMembershipRequest) GetKey() *GetMembershipRequest {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateMembershipRequest) GetRole() Role {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

type UpdateSiloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         *GetSiloRequest `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Alias       *string         `protobuf:"bytes,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	Name        *string         `protobuf:"bytes,7,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string         `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *UpdateSiloRequest) Reset() {
	*x = UpdateSiloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSiloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSiloRequest) ProtoMessage() {}

func (x *UpdateSiloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSiloRequest.ProtoReflect.Descriptor instead.
func (*UpdateSiloRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateSiloRequest) GetKey() *GetSiloRequest {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateSiloRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *UpdateSiloRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateSiloRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type UpdateTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         *GetTeamRequest `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Alias       *string         `protobuf:"bytes,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	Name        *string         `protobuf:"bytes,7,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string         `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *UpdateTeamRequest) Reset() {
	*x = UpdateTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamRequest) ProtoMessage() {}

func (x *UpdateTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamRequest.ProtoReflect.Descriptor instead.
func (*UpdateTeamRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateTeamRequest) GetKey() *GetTeamRequest {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateTeamRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *UpdateTeamRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateTeamRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type UpdateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           *GetTokenRequest       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name          *string                `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	UseCountLimit *uint64                `protobuf:"varint,8,opt,name=use_count_limit,json=useCountLimit,proto3,oneof" json:"use_count_limit,omitempty"`
	DateExpired   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=date_expired,json=dateExpired,proto3,oneof" json:"date_expired,omitempty"`
}

func (x *UpdateTokenRequest) Reset() {
	*x = UpdateTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTokenRequest) ProtoMessage() {}

func (x *UpdateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTokenRequest.ProtoReflect.Descriptor instead.
func (*UpdateTokenRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateTokenRequest) GetKey() *GetTokenRequest {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateTokenRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateTokenRequest) GetUseCountLimit() uint64 {
	if x != nil && x.UseCountLimit != nil {
		return *x.UseCountLimit
	}
	return 0
}

func (x *UpdateTokenRequest) GetDateExpired() *timestamppb.Timestamp {
	if x != nil {
		return x.DateExpired
	}
	return nil
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    *GetUserRequest `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Alias  *string         `protobuf:"bytes,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	Parent *GetUserRequest `protobuf:"bytes,3,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_khepri_horus_store_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_khepri_horus_store_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_khepri_horus_store_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateUserRequest) GetKey() *GetUserRequest {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateUserRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *UpdateUserRequest) GetParent() *GetUserRequest {
	if x != nil {
		return x.Parent
	}
	return nil
}

var File_khepri_horus_store_proto protoreflect.FileDescriptor

var file_khepri_horus_store_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6b, 0x68, 0x65, 0x70, 0x72, 0x69, 0x2f, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6b, 0x68, 0x65, 0x70, 0x72, 0x69, 0x2f,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb9, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x04, 0x73, 0x69, 0x6c, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x73, 0x69,
	0x6c, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x04,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x69, 0x6c, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6c, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x73, 0x69, 0x6c, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x0c, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x12, 0x2e, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x04, 0x73, 0x69, 0x6c, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x73,
	0x69, 0x6c, 0x6f, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x02, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x64,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x49, 0x6e, 0x53, 0x69, 0x6c, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x33, 0x0a, 0x04, 0x73, 0x69, 0x6c, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x73, 0x69, 0x6c, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x69, 0x6c, 0x6f,
	0x12, 0x35, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x69, 0x6c, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6c, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x73, 0x69, 0x6c, 0x6f, 0x22, 0xee, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x10, 0x62, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x49, 0x6e, 0x53, 0x69, 0x6c, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x79, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x49, 0x6e, 0x53, 0x69, 0x6c, 0x6f, 0x12, 0x53, 0x0a, 0x10, 0x62, 0x79, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x69, 0x6c, 0x6f, 0x48, 0x00, 0x52,
	0x0d, 0x62, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x69, 0x6c, 0x6f, 0x12, 0x16,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x41, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x45, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x47, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x91, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x22, 0xa5, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x5c, 0x0a, 0x12, 0x62, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x59, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x61, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x42, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x53, 0x69, 0x6c, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x69, 0x6c, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6c, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x73, 0x69, 0x6c, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x50, 0x0a, 0x10, 0x62, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x69, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x42, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x53, 0x69, 0x6c, 0x6f,
	0x48, 0x00, 0x52, 0x0d, 0x62, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x53, 0x69, 0x6c,
	0x6f, 0x12, 0x16, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x59, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x83, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x03, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x01, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6c,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x80, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x01, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0xc0, 0x07, 0x0a,
	0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x92, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x47, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x41, 0x3a, 0x01, 0x2a, 0x5a, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x73, 0x69,
	0x6c, 0x6f, 0x2f, 0x7b, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x08, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0xfb, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x22, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb4, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xad, 0x01, 0x5a, 0x46, 0x2a, 0x44, 0x2f, 0x73, 0x69, 0x6c, 0x6f, 0x2f, 0x7b,
	0x62, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f,
	0x2e, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x7d, 0x5a, 0x51, 0x2a,
	0x4f, 0x2f, 0x73, 0x69, 0x6c, 0x6f, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2a, 0x10, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x7d, 0x12, 0xfa, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0xad, 0x01, 0x5a, 0x46, 0x12, 0x44, 0x2f, 0x73, 0x69, 0x6c, 0x6f, 0x2f, 0x7b, 0x62, 0x79, 0x5f,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x73, 0x69,
	0x6c, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x69, 0x6c, 0x6f, 0x2e, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x7d, 0x5a, 0x51, 0x12, 0x4f, 0x2f, 0x73,
	0x69, 0x6c, 0x6f, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x12,
	0x9d, 0x02, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd1, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xca, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x51, 0x3a, 0x01, 0x2a, 0x32, 0x4c, 0x2f,
	0x73, 0x69, 0x6c, 0x6f, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x2e, 0x62, 0x79, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x73, 0x69, 0x6c, 0x6f, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b,
	0x6b, 0x65, 0x79, 0x2e, 0x62, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x7d, 0x5a, 0x5c, 0x3a, 0x01, 0x2a,
	0x32, 0x57, 0x2f, 0x73, 0x69, 0x6c, 0x6f, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x2e, 0x62, 0x79, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x73, 0x69,
	0x6c, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b,
	0x6b, 0x65, 0x79, 0x2e, 0x62, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x14, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x32,
	0xf7, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x55, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x3a, 0x01, 0x2a, 0x22,
	0x05, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x58, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0f, 0x2a, 0x0d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d,
	0x12, 0x54, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x22,
	0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x7b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x12, 0x61, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x1c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x32, 0x11, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x7b, 0x6b,
	0x65, 0x79, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x32, 0xcb, 0x03, 0x0a, 0x0f, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x84, 0x01,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x37, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x5a, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x7b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d,
	0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x09, 0x2f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x23,
	0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x7b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x12, 0x60, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x23, 0x2e,
	0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x19, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x12, 0x6d, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a,
	0x32, 0x15, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x7b, 0x6b, 0x65, 0x79,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x32, 0xfc, 0x03, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa3, 0x01,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x3a, 0x01, 0x2a, 0x5a, 0x3a, 0x3a, 0x01, 0x2a, 0x22,
	0x35, 0x2f, 0x73, 0x69, 0x6c, 0x6f, 0x2f, 0x7b, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x2f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0b, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x2e,
	0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x12, 0x66, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x25, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x7d, 0x12, 0x73, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x32, 0x17, 0x2f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x32, 0xfc, 0x03, 0x0a, 0x11, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa3, 0x01, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x52,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x3a, 0x01, 0x2a, 0x5a, 0x3a, 0x3a, 0x01, 0x2a, 0x22, 0x35,
	0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x0b, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x64, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x12, 0x66, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,
	0x25, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d,
	0x12, 0x73, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x32, 0x17, 0x2f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x7d, 0x32, 0xf7, 0x02, 0x0a, 0x0b, 0x53, 0x69, 0x6c, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x69, 0x6c, 0x6f, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0a, 0x3a, 0x01, 0x2a, 0x22, 0x05, 0x2f, 0x73, 0x69, 0x6c, 0x6f, 0x12, 0x58, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6c, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x73, 0x69, 0x6c, 0x6f, 0x2f, 0x7b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x12, 0x54, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1f, 0x2e,
	0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x53, 0x69, 0x6c, 0x6f, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f,
	0x73, 0x69, 0x6c, 0x6f, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x12, 0x61, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x69, 0x6c,
	0x6f, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x32, 0x11, 0x2f, 0x73,
	0x69, 0x6c, 0x6f, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x32,
	0xf2, 0x04, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x73, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x5a,
	0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x73, 0x69, 0x6c, 0x6f, 0x2f, 0x7b, 0x73, 0x69, 0x6c,
	0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x05, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x12, 0x9d, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54,
	0x5a, 0x43, 0x2a, 0x41, 0x2f, 0x73, 0x69, 0x6c, 0x6f, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x73, 0x69, 0x6c, 0x6f,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x7b, 0x62, 0x79,
	0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x7d, 0x2a, 0x0d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x7b, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x7d, 0x12, 0x99, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x5a, 0x43, 0x12, 0x41,
	0x2f, 0x73, 0x69, 0x6c, 0x6f, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x7d, 0x12, 0x0d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d,
	0x12, 0xb1, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x3a, 0x01,
	0x2a, 0x5a, 0x4e, 0x3a, 0x01, 0x2a, 0x32, 0x49, 0x2f, 0x73, 0x69, 0x6c, 0x6f, 0x2f, 0x7b, 0x6b,
	0x65, 0x79, 0x2e, 0x62, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x69, 0x6c, 0x6f, 0x2e, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x2e, 0x62, 0x79, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x6f, 0x2e, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x7d, 0x32, 0x11, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x7d, 0x32, 0xa3, 0x03, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x31, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x5a, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x7b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x7d, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x06, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x5a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a, 0x0e, 0x2f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x12, 0x57, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x16, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x7b, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x7d, 0x12, 0x64, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x32, 0x12, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x7b,
	0x6b, 0x65, 0x79, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x32, 0xf7, 0x02, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22,
	0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x3a, 0x01, 0x2a, 0x22, 0x05, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x58, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x12, 0x54, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x7d, 0x12, 0x61, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01,
	0x2a, 0x32, 0x11, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x7d, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x73, 0x6f, 0x6d, 0x6e, 0x75, 0x73, 0x2f, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_khepri_horus_store_proto_rawDescOnce sync.Once
	file_khepri_horus_store_proto_rawDescData = file_khepri_horus_store_proto_rawDesc
)

func file_khepri_horus_store_proto_rawDescGZIP() []byte {
	file_khepri_horus_store_proto_rawDescOnce.Do(func() {
		file_khepri_horus_store_proto_rawDescData = protoimpl.X.CompressGZIP(file_khepri_horus_store_proto_rawDescData)
	})
	return file_khepri_horus_store_proto_rawDescData
}

var file_khepri_horus_store_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_khepri_horus_store_proto_goTypes = []interface{}{
	(*CreateAccountRequest)(nil),         // 0: entpb.directory.CreateAccountRequest
	(*CreateConfRequest)(nil),            // 1: entpb.directory.CreateConfRequest
	(*CreateIdentityRequest)(nil),        // 2: entpb.directory.CreateIdentityRequest
	(*CreateInvitationRequest)(nil),      // 3: entpb.directory.CreateInvitationRequest
	(*CreateMembershipRequest)(nil),      // 4: entpb.directory.CreateMembershipRequest
	(*CreateSiloRequest)(nil),            // 5: entpb.directory.CreateSiloRequest
	(*CreateTeamRequest)(nil),            // 6: entpb.directory.CreateTeamRequest
	(*CreateTokenRequest)(nil),           // 7: entpb.directory.CreateTokenRequest
	(*CreateUserRequest)(nil),            // 8: entpb.directory.CreateUserRequest
	(*GetAccountByAliasInSilo)(nil),      // 9: entpb.directory.GetAccountByAliasInSilo
	(*GetAccountByOwnerInSilo)(nil),      // 10: entpb.directory.GetAccountByOwnerInSilo
	(*GetAccountRequest)(nil),            // 11: entpb.directory.GetAccountRequest
	(*GetConfRequest)(nil),               // 12: entpb.directory.GetConfRequest
	(*GetIdentityRequest)(nil),           // 13: entpb.directory.GetIdentityRequest
	(*GetInvitationRequest)(nil),         // 14: entpb.directory.GetInvitationRequest
	(*GetMembershipByAccountInTeam)(nil), // 15: entpb.directory.GetMembershipByAccountInTeam
	(*GetMembershipRequest)(nil),         // 16: entpb.directory.GetMembershipRequest
	(*GetSiloRequest)(nil),               // 17: entpb.directory.GetSiloRequest
	(*GetTeamByAliasInSilo)(nil),         // 18: entpb.directory.GetTeamByAliasInSilo
	(*GetTeamRequest)(nil),               // 19: entpb.directory.GetTeamRequest
	(*GetTokenRequest)(nil),              // 20: entpb.directory.GetTokenRequest
	(*GetUserRequest)(nil),               // 21: entpb.directory.GetUserRequest
	(*UpdateAccountRequest)(nil),         // 22: entpb.directory.UpdateAccountRequest
	(*UpdateConfRequest)(nil),            // 23: entpb.directory.UpdateConfRequest
	(*UpdateIdentityRequest)(nil),        // 24: entpb.directory.UpdateIdentityRequest
	(*UpdateInvitationRequest)(nil),      // 25: entpb.directory.UpdateInvitationRequest
	(*UpdateMembershipRequest)(nil),      // 26: entpb.directory.UpdateMembershipRequest
	(*UpdateSiloRequest)(nil),            // 27: entpb.directory.UpdateSiloRequest
	(*UpdateTeamRequest)(nil),            // 28: entpb.directory.UpdateTeamRequest
	(*UpdateTokenRequest)(nil),           // 29: entpb.directory.UpdateTokenRequest
	(*UpdateUserRequest)(nil),            // 30: entpb.directory.UpdateUserRequest
	(Role)(0),                            // 31: entpb.directory.Role
	(*timestamppb.Timestamp)(nil),        // 32: google.protobuf.Timestamp
	(*Account)(nil),                      // 33: entpb.directory.Account
	(*emptypb.Empty)(nil),                // 34: google.protobuf.Empty
	(*Conf)(nil),                         // 35: entpb.directory.Conf
	(*Identity)(nil),                     // 36: entpb.directory.Identity
	(*Invitation)(nil),                   // 37: entpb.directory.Invitation
	(*Membership)(nil),                   // 38: entpb.directory.Membership
	(*Silo)(nil),                         // 39: entpb.directory.Silo
	(*Team)(nil),                         // 40: entpb.directory.Team
	(*Token)(nil),                        // 41: entpb.directory.Token
	(*User)(nil),                         // 42: entpb.directory.User
}
var file_khepri_horus_store_proto_depIdxs = []int32{
	21, // 0: entpb.directory.CreateAccountRequest.owner:type_name -> entpb.directory.GetUserRequest
	17, // 1: entpb.directory.CreateAccountRequest.silo:type_name -> entpb.directory.GetSiloRequest
	31, // 2: entpb.directory.CreateAccountRequest.role:type_name -> entpb.directory.Role
	21, // 3: entpb.directory.CreateIdentityRequest.owner:type_name -> entpb.directory.GetUserRequest
	11, // 4: entpb.directory.CreateInvitationRequest.inviter:type_name -> entpb.directory.GetAccountRequest
	17, // 5: entpb.directory.CreateInvitationRequest.silo:type_name -> entpb.directory.GetSiloRequest
	32, // 6: entpb.directory.CreateInvitationRequest.date_canceled:type_name -> google.protobuf.Timestamp
	32, // 7: entpb.directory.CreateInvitationRequest.date_declined:type_name -> google.protobuf.Timestamp
	32, // 8: entpb.directory.CreateInvitationRequest.date_accepted:type_name -> google.protobuf.Timestamp
	32, // 9: entpb.directory.CreateInvitationRequest.date_expired:type_name -> google.protobuf.Timestamp
	11, // 10: entpb.directory.CreateMembershipRequest.account:type_name -> entpb.directory.GetAccountRequest
	19, // 11: entpb.directory.CreateMembershipRequest.team:type_name -> entpb.directory.GetTeamRequest
	31, // 12: entpb.directory.CreateMembershipRequest.role:type_name -> entpb.directory.Role
	17, // 13: entpb.directory.CreateTeamRequest.silo:type_name -> entpb.directory.GetSiloRequest
	21, // 14: entpb.directory.CreateTokenRequest.owner:type_name -> entpb.directory.GetUserRequest
	20, // 15: entpb.directory.CreateTokenRequest.parent:type_name -> entpb.directory.GetTokenRequest
	32, // 16: entpb.directory.CreateTokenRequest.date_expired:type_name -> google.protobuf.Timestamp
	21, // 17: entpb.directory.CreateUserRequest.parent:type_name -> entpb.directory.GetUserRequest
	17, // 18: entpb.directory.GetAccountByAliasInSilo.silo:type_name -> entpb.directory.GetSiloRequest
	21, // 19: entpb.directory.GetAccountByOwnerInSilo.owner:type_name -> entpb.directory.GetUserRequest
	17, // 20: entpb.directory.GetAccountByOwnerInSilo.silo:type_name -> entpb.directory.GetSiloRequest
	9,  // 21: entpb.directory.GetAccountRequest.by_alias_in_silo:type_name -> entpb.directory.GetAccountByAliasInSilo
	10, // 22: entpb.directory.GetAccountRequest.by_owner_in_silo:type_name -> entpb.directory.GetAccountByOwnerInSilo
	11, // 23: entpb.directory.GetMembershipByAccountInTeam.account:type_name -> entpb.directory.GetAccountRequest
	19, // 24: entpb.directory.GetMembershipByAccountInTeam.team:type_name -> entpb.directory.GetTeamRequest
	15, // 25: entpb.directory.GetMembershipRequest.by_account_in_team:type_name -> entpb.directory.GetMembershipByAccountInTeam
	17, // 26: entpb.directory.GetTeamByAliasInSilo.silo:type_name -> entpb.directory.GetSiloRequest
	18, // 27: entpb.directory.GetTeamRequest.by_alias_in_silo:type_name -> entpb.directory.GetTeamByAliasInSilo
	11, // 28: entpb.directory.UpdateAccountRequest.key:type_name -> entpb.directory.GetAccountRequest
	31, // 29: entpb.directory.UpdateAccountRequest.role:type_name -> entpb.directory.Role
	12, // 30: entpb.directory.UpdateConfRequest.key:type_name -> entpb.directory.GetConfRequest
	13, // 31: entpb.directory.UpdateIdentityRequest.key:type_name -> entpb.directory.GetIdentityRequest
	14, // 32: entpb.directory.UpdateInvitationRequest.key:type_name -> entpb.directory.GetInvitationRequest
	32, // 33: entpb.directory.UpdateInvitationRequest.date_canceled:type_name -> google.protobuf.Timestamp
	32, // 34: entpb.directory.UpdateInvitationRequest.date_declined:type_name -> google.protobuf.Timestamp
	32, // 35: entpb.directory.UpdateInvitationRequest.date_accepted:type_name -> google.protobuf.Timestamp
	32, // 36: entpb.directory.UpdateInvitationRequest.date_expired:type_name -> google.protobuf.Timestamp
	16, // 37: entpb.directory.UpdateMembershipRequest.key:type_name -> entpb.directory.GetMembershipRequest
	31, // 38: entpb.directory.UpdateMembershipRequest.role:type_name -> entpb.directory.Role
	17, // 39: entpb.directory.UpdateSiloRequest.key:type_name -> entpb.directory.GetSiloRequest
	19, // 40: entpb.directory.UpdateTeamRequest.key:type_name -> entpb.directory.GetTeamRequest
	20, // 41: entpb.directory.UpdateTokenRequest.key:type_name -> entpb.directory.GetTokenRequest
	32, // 42: entpb.directory.UpdateTokenRequest.date_expired:type_name -> google.protobuf.Timestamp
	21, // 43: entpb.directory.UpdateUserRequest.key:type_name -> entpb.directory.GetUserRequest
	21, // 44: entpb.directory.UpdateUserRequest.parent:type_name -> entpb.directory.GetUserRequest
	0,  // 45: entpb.directory.AccountService.Create:input_type -> entpb.directory.CreateAccountRequest
	11, // 46: entpb.directory.AccountService.Delete:input_type -> entpb.directory.GetAccountRequest
	11, // 47: entpb.directory.AccountService.Get:input_type -> entpb.directory.GetAccountRequest
	22, // 48: entpb.directory.AccountService.Update:input_type -> entpb.directory.UpdateAccountRequest
	1,  // 49: entpb.directory.ConfService.Create:input_type -> entpb.directory.CreateConfRequest
	12, // 50: entpb.directory.ConfService.Delete:input_type -> entpb.directory.GetConfRequest
	12, // 51: entpb.directory.ConfService.Get:input_type -> entpb.directory.GetConfRequest
	23, // 52: entpb.directory.ConfService.Update:input_type -> entpb.directory.UpdateConfRequest
	2,  // 53: entpb.directory.IdentityService.Create:input_type -> entpb.directory.CreateIdentityRequest
	13, // 54: entpb.directory.IdentityService.Delete:input_type -> entpb.directory.GetIdentityRequest
	13, // 55: entpb.directory.IdentityService.Get:input_type -> entpb.directory.GetIdentityRequest
	24, // 56: entpb.directory.IdentityService.Update:input_type -> entpb.directory.UpdateIdentityRequest
	3,  // 57: entpb.directory.InvitationService.Create:input_type -> entpb.directory.CreateInvitationRequest
	14, // 58: entpb.directory.InvitationService.Delete:input_type -> entpb.directory.GetInvitationRequest
	14, // 59: entpb.directory.InvitationService.Get:input_type -> entpb.directory.GetInvitationRequest
	25, // 60: entpb.directory.InvitationService.Update:input_type -> entpb.directory.UpdateInvitationRequest
	4,  // 61: entpb.directory.MembershipService.Create:input_type -> entpb.directory.CreateMembershipRequest
	16, // 62: entpb.directory.MembershipService.Delete:input_type -> entpb.directory.GetMembershipRequest
	16, // 63: entpb.directory.MembershipService.Get:input_type -> entpb.directory.GetMembershipRequest
	26, // 64: entpb.directory.MembershipService.Update:input_type -> entpb.directory.UpdateMembershipRequest
	5,  // 65: entpb.directory.SiloService.Create:input_type -> entpb.directory.CreateSiloRequest
	17, // 66: entpb.directory.SiloService.Delete:input_type -> entpb.directory.GetSiloRequest
	17, // 67: entpb.directory.SiloService.Get:input_type -> entpb.directory.GetSiloRequest
	27, // 68: entpb.directory.SiloService.Update:input_type -> entpb.directory.UpdateSiloRequest
	6,  // 69: entpb.directory.TeamService.Create:input_type -> entpb.directory.CreateTeamRequest
	19, // 70: entpb.directory.TeamService.Delete:input_type -> entpb.directory.GetTeamRequest
	19, // 71: entpb.directory.TeamService.Get:input_type -> entpb.directory.GetTeamRequest
	28, // 72: entpb.directory.TeamService.Update:input_type -> entpb.directory.UpdateTeamRequest
	7,  // 73: entpb.directory.TokenService.Create:input_type -> entpb.directory.CreateTokenRequest
	20, // 74: entpb.directory.TokenService.Delete:input_type -> entpb.directory.GetTokenRequest
	20, // 75: entpb.directory.TokenService.Get:input_type -> entpb.directory.GetTokenRequest
	29, // 76: entpb.directory.TokenService.Update:input_type -> entpb.directory.UpdateTokenRequest
	8,  // 77: entpb.directory.UserService.Create:input_type -> entpb.directory.CreateUserRequest
	21, // 78: entpb.directory.UserService.Delete:input_type -> entpb.directory.GetUserRequest
	21, // 79: entpb.directory.UserService.Get:input_type -> entpb.directory.GetUserRequest
	30, // 80: entpb.directory.UserService.Update:input_type -> entpb.directory.UpdateUserRequest
	33, // 81: entpb.directory.AccountService.Create:output_type -> entpb.directory.Account
	34, // 82: entpb.directory.AccountService.Delete:output_type -> google.protobuf.Empty
	33, // 83: entpb.directory.AccountService.Get:output_type -> entpb.directory.Account
	33, // 84: entpb.directory.AccountService.Update:output_type -> entpb.directory.Account
	35, // 85: entpb.directory.ConfService.Create:output_type -> entpb.directory.Conf
	34, // 86: entpb.directory.ConfService.Delete:output_type -> google.protobuf.Empty
	35, // 87: entpb.directory.ConfService.Get:output_type -> entpb.directory.Conf
	35, // 88: entpb.directory.ConfService.Update:output_type -> entpb.directory.Conf
	36, // 89: entpb.directory.IdentityService.Create:output_type -> entpb.directory.Identity
	34, // 90: entpb.directory.IdentityService.Delete:output_type -> google.protobuf.Empty
	36, // 91: entpb.directory.IdentityService.Get:output_type -> entpb.directory.Identity
	36, // 92: entpb.directory.IdentityService.Update:output_type -> entpb.directory.Identity
	37, // 93: entpb.directory.InvitationService.Create:output_type -> entpb.directory.Invitation
	34, // 94: entpb.directory.InvitationService.Delete:output_type -> google.protobuf.Empty
	37, // 95: entpb.directory.InvitationService.Get:output_type -> entpb.directory.Invitation
	37, // 96: entpb.directory.InvitationService.Update:output_type -> entpb.directory.Invitation
	38, // 97: entpb.directory.MembershipService.Create:output_type -> entpb.directory.Membership
	34, // 98: entpb.directory.MembershipService.Delete:output_type -> google.protobuf.Empty
	38, // 99: entpb.directory.MembershipService.Get:output_type -> entpb.directory.Membership
	38, // 100: entpb.directory.MembershipService.Update:output_type -> entpb.directory.Membership
	39, // 101: entpb.directory.SiloService.Create:output_type -> entpb.directory.Silo
	34, // 102: entpb.directory.SiloService.Delete:output_type -> google.protobuf.Empty
	39, // 103: entpb.directory.SiloService.Get:output_type -> entpb.directory.Silo
	39, // 104: entpb.directory.SiloService.Update:output_type -> entpb.directory.Silo
	40, // 105: entpb.directory.TeamService.Create:output_type -> entpb.directory.Team
	34, // 106: entpb.directory.TeamService.Delete:output_type -> google.protobuf.Empty
	40, // 107: entpb.directory.TeamService.Get:output_type -> entpb.directory.Team
	40, // 108: entpb.directory.TeamService.Update:output_type -> entpb.directory.Team
	41, // 109: entpb.directory.TokenService.Create:output_type -> entpb.directory.Token
	34, // 110: entpb.directory.TokenService.Delete:output_type -> google.protobuf.Empty
	41, // 111: entpb.directory.TokenService.Get:output_type -> entpb.directory.Token
	41, // 112: entpb.directory.TokenService.Update:output_type -> entpb.directory.Token
	42, // 113: entpb.directory.UserService.Create:output_type -> entpb.directory.User
	34, // 114: entpb.directory.UserService.Delete:output_type -> google.protobuf.Empty
	42, // 115: entpb.directory.UserService.Get:output_type -> entpb.directory.User
	42, // 116: entpb.directory.UserService.Update:output_type -> entpb.directory.User
	81, // [81:117] is the sub-list for method output_type
	45, // [45:81] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_khepri_horus_store_proto_init() }
func file_khepri_horus_store_proto_init() {
	if File_khepri_horus_store_proto != nil {
		return
	}
	file_khepri_horus_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_khepri_horus_store_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIdentityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMembershipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSiloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountByAliasInSilo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountByOwnerInSilo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdentityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMembershipByAccountInTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMembershipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamByAliasInSilo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIdentityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMembershipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSiloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_khepri_horus_store_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_khepri_horus_store_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*GetAccountRequest_Id)(nil),
		(*GetAccountRequest_ByAliasInSilo)(nil),
		(*GetAccountRequest_ByOwnerInSilo)(nil),
		(*GetAccountRequest_Query)(nil),
	}
	file_khepri_horus_store_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*GetConfRequest_Id)(nil),
		(*GetConfRequest_Query)(nil),
	}
	file_khepri_horus_store_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*GetIdentityRequest_Id)(nil),
		(*GetIdentityRequest_Query)(nil),
	}
	file_khepri_horus_store_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*GetInvitationRequest_Id)(nil),
		(*GetInvitationRequest_Query)(nil),
	}
	file_khepri_horus_store_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*GetMembershipRequest_Id)(nil),
		(*GetMembershipRequest_ByAccountInTeam)(nil),
		(*GetMembershipRequest_Query)(nil),
	}
	file_khepri_horus_store_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*GetSiloRequest_Id)(nil),
		(*GetSiloRequest_Alias)(nil),
		(*GetSiloRequest_Query)(nil),
	}
	file_khepri_horus_store_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*GetTeamRequest_Id)(nil),
		(*GetTeamRequest_ByAliasInSilo)(nil),
		(*GetTeamRequest_Query)(nil),
	}
	file_khepri_horus_store_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*GetTokenRequest_Id)(nil),
		(*GetTokenRequest_Value)(nil),
		(*GetTokenRequest_Query)(nil),
	}
	file_khepri_horus_store_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*GetUserRequest_Id)(nil),
		(*GetUserRequest_Alias)(nil),
		(*GetUserRequest_Query)(nil),
	}
	file_khepri_horus_store_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_khepri_horus_store_proto_msgTypes[30].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_khepri_horus_store_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   9,
		},
		GoTypes:           file_khepri_horus_store_proto_goTypes,
		DependencyIndexes: file_khepri_horus_store_proto_depIdxs,
		MessageInfos:      file_khepri_horus_store_proto_msgTypes,
	}.Build()
	File_khepri_horus_store_proto = out.File
	file_khepri_horus_store_proto_rawDesc = nil
	file_khepri_horus_store_proto_goTypes = nil
	file_khepri_horus_store_proto_depIdxs = nil
}
