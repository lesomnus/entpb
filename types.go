package entpb

import (
	"fmt"
	"reflect"
	"slices"

	"entgo.io/ent/schema/field"
	ent "entgo.io/ent/schema/field"
	"github.com/lesomnus/entpb/pbgen/ident"
)

type PbType struct {
	Name    ident.Ident // Type name.
	Package ident.Full  // Package name of the type.
	Import  string      // Import path for this type.

	// `Package` is resolved at generation-time if `Import` is known in generation context.
	// For example, "entpb.direcotry" will be resolved if `Import` is "entpb/directory/common.proto"
	// where the proto file is generated by current generator (which currently evaluating this `PbType`).
}

func (t *PbType) IsMessage() bool {
	return t.Import != ""
}

func (t *PbType) FullIdent() ident.Full {
	return append(t.Package, t.Name)
}

func (t *PbType) ReferencedIn(other ident.Full) ident.Full {
	if slices.Equal(t.Package, other) {
		return ident.Full{t.Name}
	}

	return append(t.Package, t.Name)
}

func (t *PbType) Equal(other *PbType) bool {
	return t.Name == other.Name && t.Import == other.Import
}

var (
	PbThis = PbType{Name: "$this"}

	PbUuid      = PbType{Name: "bytes"}
	PbEmpty     = PbType{Name: "Empty", Package: ident.Full{"google", "protobuf"}, Import: "google/protobuf/empty.proto"}
	PbTimestamp = PbType{Name: "Timestamp", Package: ident.Full{"google", "protobuf"}, Import: "google/protobuf/timestamp.proto"}
)

var pb_types = [...]PbType{
	ent.TypeBool:    {Name: "bool"},
	ent.TypeInt8:    {Name: "sint32"},
	ent.TypeInt16:   {Name: "sint32"},
	ent.TypeInt32:   {Name: "sint32"},
	ent.TypeInt:     {Name: "sint64"},
	ent.TypeInt64:   {Name: "sint64"},
	ent.TypeUint8:   {Name: "uint32"},
	ent.TypeUint16:  {Name: "uint32"},
	ent.TypeUint32:  {Name: "uint32"},
	ent.TypeUint:    {Name: "uint64"},
	ent.TypeUint64:  {Name: "uint64"},
	ent.TypeFloat32: {Name: "float"},
	ent.TypeFloat64: {Name: "double"},
	ent.TypeBytes:   {Name: "bytes"},
	ent.TypeString:  {Name: "string"},

	ent.TypeUUID: PbUuid,
	ent.TypeTime: PbTimestamp,
}

func globalTypeName(path string, ident string) string {
	return fmt.Sprintf("%s:%s", path, ident)
}

func globalTypeNameFromReflect(t reflect.Type) string {
	return globalTypeName(t.PkgPath(), t.String())
}

func globalTypeNameFromEntTypeInfo(t *field.TypeInfo) string {
	return globalTypeName(t.PkgPath, t.Ident)
}
