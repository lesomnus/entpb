package cmd

import (
	"fmt"
	"path/filepath"

	"github.com/iancoleman/strcase"
	"github.com/lesomnus/entpb"
	"github.com/lesomnus/entpb/pbgen/ident"
	"google.golang.org/protobuf/compiler/protogen"
)

type imports struct {
	Ent protogen.GoImportPath
	Pb  protogen.GoImportPath

	Runtime protogen.GoImportPath
}

type Printer struct {
	EntPackage  protogen.GoImportPath // Package generated by Ent.
	ImportPath  protogen.GoImportPath // Where the generated codes will be written.
	PackageName string

	Build  *entpb.Build
	Plugin *protogen.Plugin
}

func (p *Printer) Print() error {
	if err := p.PrintEnum(); err != nil {
		return err
	}

	for _, pb_file := range p.Plugin.Files {
		if !pb_file.Generate {
			continue
		}
		if err := p.PrintService(pb_file); err != nil {
			return err
		}
	}
	return nil
}

func (p *Printer) NewGeneratedFile(name string) *protogen.GeneratedFile {
	name = filepath.Join(string(p.ImportPath), fmt.Sprintf("%s.pb.go", name))
	o := p.Plugin.NewGeneratedFile(name, p.ImportPath)
	o.Write([]byte(`// Code generated by "protoc-gen-entpb". DO NOT EDIT`))
	o.Write([]byte(fmt.Sprintf("\n\npackage %s\n\n", p.PackageName)))
	return o
}

func (p *Printer) PrintEnum() error {
	o := p.NewGeneratedFile("enum")
	tpl := p.NewTemplate(o)
	for _, pb_file := range p.Plugin.Files {
		if !pb_file.Generate {
			continue
		}

		for _, pb_enum := range pb_file.Enums {
			var ent_enum *entpb.Enum
			for _, v := range p.Build.Enums {
				if v.Ident != ident.Ident(pb_enum.Desc.Name()) {
					continue
				}

				ent_enum = v
				break
			}
			if ent_enum == nil {
				panic("invalid build state: enum not found")
			}

			if err := tpl.ExecuteTemplate(o, "enum.go.tpl", struct {
				imports
				EntEnum *entpb.Enum
				PbEnum  *protogen.Enum
			}{
				imports: imports{
					Ent:     p.EntPackage,
					Pb:      pb_file.GoImportPath,
					Runtime: importRuntime,
				},
				EntEnum: ent_enum,
				PbEnum:  pb_enum,
			}); err != nil {
				return fmt.Errorf("enum: %w", err)
			}
		}
	}

	return nil
}

func (p *Printer) PrintService(pb_file *protogen.File) error {
	imports_ := imports{
		Ent:     p.EntPackage,
		Pb:      pb_file.GoImportPath,
		Runtime: importRuntime,
	}

	for _, pb_service := range pb_file.Services {
		service_name := string(pb_service.Desc.Name())
		var ent_service *entpb.Service
		for _, ent_message := range p.Build.Schemas {
			s := ent_message.Service
			if s == nil {
				continue
			}
			if string(s.Ident) != service_name {
				continue
			}

			ent_service = s
			break
		}
		if ent_service == nil {
			return nil
		}

		o := p.NewGeneratedFile(strcase.ToKebab(string(ent_service.Message.Ident)))
		tpl := p.NewTemplate(o)
		if err := tpl.ExecuteTemplate(o, "server-struct.go.tpl", struct {
			imports
			PbSvc *protogen.Service
		}{
			imports: imports_,
			PbSvc:   pb_service,
		}); err != nil {
			return fmt.Errorf("server-struct: %w", err)
		}

		ctx := struct {
			imports
			PbSvc    *protogen.Service
			PbMethod *protogen.Method
			EntMsg   *entpb.MessageAnnotation
			EntRpc   *entpb.Rpc
		}{
			imports: imports_,
			PbSvc:   pb_service,
			EntMsg:  ent_service.Message,
		}
		for _, pb_method := range pb_service.Methods {
			ent_rpc, ok := ent_service.Rpcs[ident.Ident(pb_method.Desc.Name())]
			if !ok {
				panic("invalid build state: RPC not found")
			}

			ctx.PbMethod = pb_method
			ctx.EntRpc = ent_rpc

			method_name := ident.Ident(pb_method.Desc.Name())
			switch method_name {
			case "Create":
				if err := tpl.ExecuteTemplate(o, "method-create.go.tpl", ctx); err != nil {
					return fmt.Errorf("method-create: %w", err)
				}

			case "Get":
				if err := tpl.ExecuteTemplate(o, "method-get.go.tpl", ctx); err != nil {
					return fmt.Errorf("method-get: %w", err)
				}

			case "Update":
				if err := tpl.ExecuteTemplate(o, "method-update.go.tpl", ctx); err != nil {
					return fmt.Errorf("method-update: %w", err)
				}

			default:
			}
		}
		if err := tpl.ExecuteTemplate(o, "to-pb.go.tpl", struct {
			imports
			EntMsg *entpb.MessageAnnotation
		}{
			imports_,
			ent_service.Message,
		}); err != nil {
			return fmt.Errorf("to-pb: %w", err)
		}

	}
	return nil
}
